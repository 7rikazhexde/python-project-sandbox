# プロジェクトの基本設定
# PEP 621に準拠したプロジェクトメタデータ
# Poetry はこのセクションを優先して使用する。
[project]
name = "python-project-sandbox"
version = "1.2.3"
description = "An experimental project to test out various tools."
authors = [
    {name = "7rikaz", email = "33836132+7rikazhexde@users.noreply.github.com"}
]
license = "MIT"
readme = "README.md"
requires-python = ">=3.11,<4.0"
dependencies = [
    "numpy==2.2.4",
    "pandas>=2.2.2",
    "requests>=2.32.3",
    "dash>=3.0.3",
    "aiohttp>=3.11.16",
    "types-requests>=2.32.0.20250328",
    "dash-bootstrap-components>=1.6.0",
    "pytoniq-core>=0.1.40",
    "babel>=2.16.0",
    "httpx>=0.28.1",
    "python-dotenv>=1.0.1",
    "freezegun>=1.5.1",
    "tomlkit>=0.13.2",
    "types-pytz>=2024.2.0.20240913"
]

# 開発用の追加依存関係
[project.optional-dependencies]
dev = [
    "pre-commit>=4.2.0",
    "mypy>=1.14.1",
    "taskipy>=1.14.1",
    "pytest>=8.3.4",
    "pytest-cov>=6.1.1",
    "pytest-xdist>=3.6.1",
    "pytest-html>=4.1.1",
    "pytest-mock>=3.14.0",
    "pytest-asyncio>=0.26.0",
    "ruff==0.11.5",
    "pytest-testmon>=2.1.3",
    "shellcheck-py>=0.10.0.1",
]

## プロジェクトのURLリンク
#[project.urls]
#Homepage = "https://github.com/7rikazhexde/python-project-sandbox"
#Repository = "https://github.com/7rikazhexde/python-project-sandbox.git"
#Issues = "https://github.com/7rikazhexde/python-project-sandbox/issues"

## Poetry固有の設定
## Dependabot の要件を満たすために追加
## Poetry は警告を出しますが、これは意図的な重複であり、両ツールの互換性のために維持する。
[tool.poetry]
name = "python-project-sandbox"        # Dependabot requirement
version = "1.2.3"                      # Dependabot requirement
description = "An experimental project to test out various tools."    # Dependabot requirement
authors = ["7rikaz <33836132+7rikazhexde@users.noreply.github.com>"]  # Dependabot requirement
packages = [
    { include = "project_a" }
]
## package-mode = true

# packages / package-modeの指定について
# packages を指定する場合(カスタムディレクトリ構造)
#
# my-project/
# ├── project_a/         # このディレクトリがパッケージとして認識される
# │   ├── __init__.py
# │   └── main.py
# ├── scripts/           # 除外される
# ├── tools/             # 除外される
# └── pyproject.toml

# package-mode = true の場合
#
# my-project/
# ├── src/              # 自動的に検出される
# │   └── project_a/
# │       ├── __init__.py
# │       └── main.py
# # または
# ├── my_project/       # プロジェクト名と同じ名前なら自動検出
# │   ├── __init__.py
# │   └── main.py
# └── pyproject.toml

# package-mode = false の場合
#
# プロジェクトをPythonパッケージとしてではなく、
# 単なるスクリプト集として扱う設定です。
# この場合、pip install . でプロジェクトをインストールすることはできず、
# 代わりに pip install -r requirements.txt && pip install -r requirements-dev.txt を使用して依存関係のみをインストールする必要があります。
# これは、プロジェクトを配布可能なパッケージとしてビルドせず、依存関係の管理のみを行う場合の標準的なアプローチです。

## Poetryの依存関係設定
## Dependabot はこのセクションを使用して依存関係を解析する。
#[tool.poetry.dependencies]
#python = "^3.11"
#numpy = "2.2.4"
#pandas = "^2.2.2"
#requests = "^2.32.3"
#dash = "^3.0.3"
#aiohttp = "^3.11.16"
#types-requests = "^2.32.0.20250328"
#dash-bootstrap-components = "^1.6.0"
#pytoniq-core = "^0.1.40"
#babel = "^2.16.0"
#httpx = "^0.28.1"
#python-dotenv = "^1.1.0"
#freezegun = "^1.5.1"
#tomlkit = "^0.13.2"
#types-pytz = "^2025.2.0.20250326"
#

# Poetry開発依存関係
[tool.poetry.group.dev.dependencies]
pre-commit = "^4.2.0"
mypy = "^1.14.1"
taskipy = "^1.14.1"
pytest = "^8.3.4"
pytest-cov = "^6.1.1"
pytest-xdist = "^3.6.1"
pytest-html = "^4.1.1"
pytest-mock = "^3.14.0"
pytest-asyncio = "^0.26.0"
ruff = "0.11.5"
pytest-testmon = "^2.1.3"
shellcheck-py = "^0.10.0.1"

# ビルドシステムの設定
[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Taskipyタスク定義
[tool.taskipy.tasks]
testcoverageverbose = "pytest -s -vv --cov=. --cov-branch --cov-report term-missing --cov-report html"
testhtmlreport = "pytest --html=htmlcov/report_page.html"
testcixml = "python scripts/run_tests.py --report xml"
testciterm = "python scripts/run_tests.py --report term"
testtestmon = "pytest --testmon"
testcoverage = "pytest --cov=. --cov-branch --cov-report=term-missing --cov-report=html"

# Ruffの設定
[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
target-version = "py310"

[tool.ruff.lint]
select = ["E", "F", "I"]
ignore = ["E402", "E501"]
per-file-ignores = {}

# Mypy設定
[tool.mypy]
files = ["project_a", "tests", "ci", "scripts"]
python_version = "3.12"
show_error_context = true
show_column_numbers = true
ignore_missing_imports = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_return_any = true
warn_unused_ignores = true
warn_redundant_casts = true

[[tool.mypy.overrides]]
module = ["pytz.*"]
ignore_missing_imports = true

# Pytest設定
[tool.pytest.ini_options]
testpaths = ["project_a", "tests"]
pythonpath = ["."]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
filterwarnings = [
    "ignore::pytest.PytestRemovedIn9Warning"
]

# カバレッジ設定
[tool.coverage.run]
source = ["project_a"]
omit = ["project_a/staking/ton_whales_staking_dashboard.py"]
branch = false

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "pass",
    "except ImportError:",
    "def main"
]

[tool.coverage.html]
directory = "htmlcov"
