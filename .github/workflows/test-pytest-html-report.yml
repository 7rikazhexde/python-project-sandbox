# =============================================================================
# pytest-html Report and Deploy Multi-OS
# =============================================================================
# 概要: マルチOS環境でのHTMLテストレポート生成とGitHub Pagesデプロイ
# 処理: pytest-htmlで詳細なHTMLテストレポート生成、GitHub Pagesに自動デプロイ
# 補足: 特定パス変更時のみ実行、ダークモードCSS対応、Discord通知機能
# =============================================================================

name: pytest-html Report and Deploy Multi-OS

on:
  push:
    branches:
      - "main"
    paths:
      - "project_a/**"
      - "tests/**"
      - "uv.lock"
      - "justfile"
      - ".github/workflows/test-pytest-html-report.yml"
      - ".github/json2vars-setter/matrix.json"

jobs:
  # ==========================================================================
  # 変数設定ジョブ
  # ==========================================================================
  # 概要: 実行環境設定の読み込み
  # 処理: matrix.jsonからOS・Python版・GitHub Pagesブランチ設定を取得
  # 補足: デプロイ先ブランチ名も動的に設定
  # ==========================================================================
  set_variables:
    runs-on: ubuntu-latest
    outputs:
      os: ${{ steps.json2vars.outputs.os }}
      versions_python: ${{ steps.json2vars.outputs.versions_python }}
      ghpages_branch: ${{ steps.json2vars.outputs.ghpages_branch }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0

      - name: Set variables from JSON
        id: json2vars
        uses: 7rikazhexde/json2vars-setter@v1.0.2
        with:
          json-file: .github/json2vars-setter/matrix.json

      - name: Debug output values
        run: |
          echo "os: ${{ steps.json2vars.outputs.os }}"
          echo "versions_python: ${{ steps.json2vars.outputs.versions_python }}"
          echo "ghpages_branch: ${{ steps.json2vars.outputs.ghpages_branch }}"

  # ==========================================================================
  # テスト・HTMLレポート生成ジョブ
  # ==========================================================================
  # 概要: マルチOS環境でのHTMLテストレポート生成
  # 処理: pytest-htmlで詳細なHTMLテストレポート生成、アーティファクト保存
  # 補足: Asia/Tokyoタイムゾーン統一、Windows特別対応、カスタムCSS対応
  # ==========================================================================
  test:
    needs: set_variables
    strategy:
      matrix:
        os: ${{ fromJson(needs.set_variables.outputs.os) }}
        python-version: ${{ fromJson(needs.set_variables.outputs.versions_python) }}
    runs-on: ${{ matrix.os }}
    env:
      TZ: "Asia/Tokyo"
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5.0.0

      # ======================================================================
      # タイムゾーン設定
      # ======================================================================
      # 概要: 全OSでAsia/Tokyoタイムゾーンに統一
      # 処理: OS別のタイムゾーン設定とPythonでの確認
      # 補足: テストレポート生成時の一貫性確保のため
      # ======================================================================
      - name: Set timezone
        uses: szenius/set-timezone@v2.0
        with:
          timezoneLinux: "Asia/Tokyo"
          timezoneMacos: "Asia/Tokyo"
          timezoneWindows: "Tokyo Standard Time"

      # ======================================================================
      # uvキャッシュ
      # ======================================================================
      # 概要: Python依存関係のキャッシュ
      # 処理: ~/.cache/uvと.venvをキャッシュ、依存関係ファイルハッシュでキー生成
      # 補足: 全OS・Python版で統一キャッシュを使用
      # ======================================================================
      - name: Cache uv dependencies
        uses: actions/cache@v4.2.4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: uv-unified-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6.7.0
        with:
          enable-cache: false

      - name: Install dependencies
        shell: bash
        run: |
          uv venv .venv --python python
          uv sync --extra dev

      # ======================================================================
      # Rust環境とキャッシュ
      # ======================================================================
      # 概要: Rustツールチェーンとjustコマンドのセットアップ
      # 処理: Rustインストール、キャッシュ、justビルド
      # 補足: OS別にキャッシュ、cargo install の高速化
      # ======================================================================
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - uses: Swatinem/rust-cache@v2.8.1

      - name: Install just
        run: cargo install just --locked
        shell: bash

      - name: Verify just
        run: just --version
        shell: bash

      # ======================================================================
      # HTMLテストレポート生成
      # ======================================================================
      # 概要: pytest-htmlで詳細なHTMLテストレポート生成
      # 処理: OS・Python版別のディレクトリにHTMLレポート生成
      # 補足: justコマンド優先、カスタムCSS対応、品質チェック
      # ======================================================================
      - name: Run tests with pytest-html
        id: pytest-html
        shell: bash
        run: |
          echo "🧪 Running tests with HTML report generation..."

          # レポート保存パスの設定
          report_path="test_results/${{ matrix.os }}/python/${{ matrix.python-version }}"
          mkdir -p "${report_path}"

          echo "📂 Report will be saved to: ${report_path}"

          # HTMLレポート生成
          if command -v just &> /dev/null && just --list | grep -q "testhtml"; then
            echo "🚀 Using just for HTML report generation..."
            echo "📋 Available just tasks:"
            if command -v grep &> /dev/null; then
              if just --list | grep -E "(test|html)"; then
                echo "Test/HTML tasks found"
              else
                echo "No test/html tasks found"
              fi
            else
              just --list
            fi

            # justfile内のHTMLレポート生成タスクを使用
            if just --list | grep -q "test-html-report"; then
              echo "🎯 Running: just test-html-report"
              just test-html-report
              # 生成されたレポートファイルを確認して移動
              if [ -f "htmlcov/report_page.html" ]; then
                echo "📁 Moving HTML report to ${report_path}/"
                cp htmlcov/report_page.html "${report_path}/"
                # CSS、JS、その他のアセットも一緒に移動
                for asset_dir in css js assets; do
                  if [ -d "htmlcov/${asset_dir}" ]; then
                    cp -r "htmlcov/${asset_dir}" "${report_path}/"
                    echo "📦 Copied ${asset_dir} assets"
                  fi
                done
              fi
            elif just --list | grep -q "testhtml"; then
              echo "🎯 Running: just testhtml"
              just testhtml
              # 生成されたレポートファイルを確認して移動
              if [ -f "htmlcov/report_page.html" ]; then
                echo "📁 Moving HTML report to ${report_path}/"
                cp htmlcov/report_page.html "${report_path}/"
                # CSS、JS、その他のアセットも一緒に移動
                for asset_dir in css js assets; do
                  if [ -d "htmlcov/${asset_dir}" ]; then
                    cp -r "htmlcov/${asset_dir}" "${report_path}/"
                    echo "📦 Copied ${asset_dir} assets"
                  fi
                done
              fi
            else
              echo "📊 Fallback: Using direct pytest for HTML report generation..."
              # ダークモードCSS適用のために--cssオプションを追加
              if [ -f "css/style.css" ]; then
                echo "🎨 Applying custom dark mode CSS..."
                uv run python -m pytest --html="${report_path}/report_page.html" \
                              --self-contained-html \
                              --css=css/style.css \
                              project_a tests/
              else
                echo "⚠️ Custom CSS not found, using default styling..."
                uv run python -m pytest --html="${report_path}/report_page.html" --self-contained-html project_a tests/
              fi
            fi
          else
            echo "📊 Using direct uv run for HTML report generation..."
            # ダークモードCSS適用のために--cssオプションを追加
            if [ -f "css/style.css" ]; then
              echo "🎨 Applying custom dark mode CSS..."
              uv run python -m pytest --html="${report_path}/report_page.html" \
                            --self-contained-html \
                            --css=css/style.css \
                            --capture=no \
                            project_a tests/
            else
              echo "⚠️ Custom CSS not found, using default styling..."
              uv run python -m pytest --html="${report_path}/report_page.html" \
                            --self-contained-html \
                            --capture=no \
                            project_a tests/
            fi
          fi

          # 生成されたファイルの確認と検証
          if [ -f "${report_path}/report_page.html" ]; then
            echo "✅ HTML report generated successfully"
            echo "📄 Report size: $(du -h "${report_path}/report_page.html" | cut -f1)"

            # HTMLレポートの品質チェック
            file_size=$(stat -c%s "${report_path}/report_page.html" 2>/dev/null || stat -f%z "${report_path}/report_page.html" 2>/dev/null || echo "0")
            if [ "$file_size" -gt 1024 ]; then
              echo "📊 Report appears to contain content (${file_size} bytes)"

              # HTMLファイル内のテスト結果数を確認
              if command -v grep &> /dev/null; then
                test_count=$(grep -o 'class="col-result' "${report_path}/report_page.html" | wc -l || echo "0")
                echo "🧪 Tests in report: ${test_count}"
              fi
            else
              echo "⚠️ Report file seems too small, may be incomplete"
            fi

            # アセットファイルの確認
            for asset_dir in css js assets; do
              if [ -d "${report_path}/${asset_dir}" ]; then
                echo "🎨 ${asset_dir} assets copied successfully"
              fi
            done
          else
            echo "❌ HTML report generation failed"
            echo "🔍 Contents of report directory:"
            if [ -d "${report_path}" ]; then
              ls -la "${report_path}"
            else
              echo "Report directory does not exist"
            fi
            echo "🔍 Contents of current directory:"
            # Use find instead of ls | grep for better handling of filenames
            if find . -maxdepth 1 \( -name "*html*" -o -name "*report*" \) -print | head -10; then
              echo "Found HTML/report files above"
            else
              echo "No HTML or report files found"
            fi
            exit 1
          fi

      # ======================================================================
      # カバレッジ閾値チェック
      # ======================================================================
      # 概要: カバレッジ90%閾値の強制
      # 処理: coverage reportでカバレッジ率を取得し90%未満で失敗
      # 補足: レポート生成品質の保証
      # ======================================================================
      #- name: Check coverage threshold
      #  shell: bash
      #  run: |
      #    # カバレッジ情報が利用可能かチェック
      #    if command -v coverage &> /dev/null && uv run coverage report &> /dev/null; then
      #      COVERAGE=$(uv run coverage report --format=total)
      #      echo "Coverage: ${COVERAGE}%"
      #      echo "COVERAGE=${COVERAGE}" >> "$GITHUB_ENV"
      #      if [ "${COVERAGE}" -lt 90 ]; then
      #        echo "::error::Coverage ${COVERAGE}% is below 90% threshold"
      #        exit 1
      #      fi
      #    else
      #      echo "::notice::Coverage data not available for this test run"
      #    fi

      # ======================================================================
      # アーティファクト保存
      # ======================================================================
      # 概要: HTMLテストレポートの保存
      # 処理: OS・Python版別のHTMLレポートをアーティファクトとして保存
      # 補足: デプロイジョブで使用、7日間保存、ファイル必須
      # ======================================================================
      - name: Upload pytest-html results
        uses: actions/upload-artifact@v4.6.1
        with:
          name: test-results-${{ matrix.os }}-python-${{ matrix.python-version }}
          path: test_results/${{ matrix.os }}/python/${{ matrix.python-version }}
          retention-days: 7
          if-no-files-found: error

  # ==========================================================================
  # 全テスト結果チェック
  # ==========================================================================
  # 概要: マトリックス実行の全結果確認
  # 処理: 全ジョブの成功を確認、1つでも失敗があればワークフロー失敗
  # 補足: HTMLレポート生成の品質保証
  # ==========================================================================
  check_all_tests:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Check test results
        if: contains(needs.test.result, 'failure')
        run: |
          echo "::error::Some tests failed during HTML report generation."
          echo "::error::Failed test matrices: ${{ toJson(needs.test.result) }}"
          echo "::warning::Please check the test results and fix any issues before merging."
          exit 1

      - name: All tests passed
        if: success()
        run: |
          echo "🎉 All tests passed successfully across all environments!"
          echo "📊 HTML reports generated for all OS and Python version combinations."

  # ==========================================================================
  # GitHub Pagesデプロイジョブ
  # ==========================================================================
  # 概要: 生成されたHTMLテストレポートのGitHub Pagesデプロイ
  # 処理: アーティファクトダウンロード、GitHub Pagesブランチにデプロイ
  # 補足: 変更検出、URL生成、Discord通知機能
  # ==========================================================================
  deploy:
    needs: [test, check_all_tests, set_variables]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
    outputs:
      deploy_status: ${{ steps.check_and_deploy.outputs.deploy_status }}
      updated_reports: ${{ steps.check_and_deploy.outputs.updated_reports }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0

      - name: Install uv (for deployment utilities)
        uses: astral-sh/setup-uv@v6.7.0
        with:
          enable-cache: false

      - name: Set up Python for deployment
        run: |
          uv python install 3.12
          uv python pin 3.12

      - name: Download pytest-html artifacts
        uses: actions/download-artifact@v5.0.0

      - name: Setup Git
        run: |
          echo "⚙️ Setting up Git configuration..."
          git config --local user.email "33836132+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      # ======================================================================
      # GitHub Pagesデプロイ
      # ======================================================================
      # 概要: HTMLテストレポートのGitHub Pagesブランチへのデプロイ
      # 処理: ブランチ取得/作成、アーティファクト移動、変更検出、コミット
      # 補足: 変更がある場合のみコミット・プッシュ、差分比較
      # ======================================================================
      - name: Check and Deploy to GitHub Pages
        id: check_and_deploy
        run: |
          # jsonで定義されたブランチ名を使用
          ghpages_branch="${{ needs.set_variables.outputs.ghpages_branch }}"

          # ブランチの取得または作成
          git fetch origin "${ghpages_branch}" || git checkout -b "${ghpages_branch}"
          git checkout "${ghpages_branch}"
          git pull origin "${ghpages_branch}" --rebase || true

          changes_made=false

          # アーティファクトの移動とコミット
          for artifact_dir in test-results-*; do
            if [ -d "$artifact_dir" ]; then
              # パスの構築
              os=$(echo "$artifact_dir" | sed -E 's/test-results-([^-]+(-[^-]+)?)-python-.*/\1/')
              python_version=$(echo "$artifact_dir" | sed -E 's/.*-python-([^-]+)/\1/')

              # 最終的なパスを構築
              html_path="pytest-html-report/${os}/python/${python_version}"

              if [ -f "${artifact_dir}/report_page.html" ]; then
                mkdir -p "${html_path}"
                # 既存のファイルとの差分を確認
                if [ ! -f "${html_path}/report_page.html" ] || ! diff "${artifact_dir}/report_page.html" "${html_path}/report_page.html" > /dev/null; then
                  echo "Changes detected for ${os} with Python ${python_version}, updating..."
                  rm -rf "${html_path}"
                  mv "${artifact_dir}" "${html_path}"
                  git add "${html_path}"
                  changes_made=true
                else
                  echo "No changes for ${os} with Python ${python_version}, skipping..."
                fi
              fi
            fi
          done

          if [ "${changes_made}" = true ]; then
            git commit -m "Update pytest-html reports on GitHub Pages"
            git push origin "${ghpages_branch}"
            echo "deploy_status=updated" >> "$GITHUB_OUTPUT"
          else
            echo "No changes to commit"
            echo "deploy_status=unchanged" >> "$GITHUB_OUTPUT"
          fi

      # ======================================================================
      # URL一覧生成
      # ======================================================================
      # 概要: デプロイされたHTMLテストレポートのURL一覧生成
      # 処理: マトリックス情報からレポートURL生成、ソート済みURL追加
      # 補足: OS絵文字付き、アクセス可能性確認、使用ヒント付き
      # ======================================================================
      - name: Generate URL list
        id: generate_url_list
        shell: bash
        run: |
          echo "🔗 Generating URL list..."

          IFS='/' read -ra REPO_INFO <<< "${GITHUB_REPOSITORY}"
          REPO_OWNER="${REPO_INFO[0]}"
          REPO_NAME="${REPO_INFO[1]}"
          URL_LIST=""

          # JSON配列から値を取得
          os='${{ needs.set_variables.outputs.os }}'
          versions_python='${{ needs.set_variables.outputs.versions_python }}'

          # jqを使用してリストを展開
          os_list=$(echo "${os}" | jq -r '.[]' | tr '\n' ' ')
          os_list="${os_list% }"
          python_versions_list=$(echo "${versions_python}" | jq -r '.[]' | tr '\n' ' ')
          python_versions_list="${python_versions_list% }"

          echo "📋 Available environments:"
          echo "  OS: ${os_list}"
          echo "  Python versions: ${python_versions_list}"

          # マトリックス情報から直接URLを生成
          for current_os in ${os_list}; do
            for version in ${python_versions_list}; do
              report_path="pytest-html-report/${current_os}/python/${version}"
              if [ -d "$report_path" ]; then
                # OS絵文字の選択
                case "${current_os}" in
                  "ubuntu-latest") os_emoji="🐧" ;;
                  "macos-latest") os_emoji="🍎" ;;
                  "windows-latest") os_emoji="🪟" ;;
                  *) os_emoji="💻" ;;
                esac

                URL_LIST="${URL_LIST}**${os_emoji} ${current_os} / Python ${version}:**\n"
                URL_LIST="${URL_LIST}🔗 [HTML Report](https://${REPO_OWNER}.github.io/${REPO_NAME}/${report_path}/report_page.html)\n"
                URL_LIST="${URL_LIST}📊 [Sorted by Result](https://${REPO_OWNER}.github.io/${REPO_NAME}/${report_path}/report_page.html?sort=result)\n\n"
                echo "  ✅ ${current_os} / Python ${version}"
              else
                echo "  ⚠️ ${current_os} / Python ${version} (not found)"
              fi
            done
          done

          {
            echo "url_list<<EOF"
            echo -e "${URL_LIST}"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      # ======================================================================
      # Discord通知（更新時）
      # ======================================================================
      # 概要: HTMLテストレポート更新時のDiscord通知
      # 処理: 更新情報、URL一覧、使用ヒントをDiscordに送信
      # 補足: DISCORD_WEBHOOK_URL設定時のみ実行
      # ======================================================================
      - name: Send Discord Notification (Updated)
        if: steps.check_and_deploy.outputs.deploy_status == 'updated'
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          echo "📢 Sending update notification to Discord..."

          # ワークフローの詳細ページURL
          workflow_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          # URLリストの整形
          formatted_urls="${{ steps.generate_url_list.outputs.url_list }}"

          # メッセージの作成
          message="## 📊 HTML Test Reports Updated ✅

          ### 🔄 Deployment Information
          **Workflow:** ${{ github.workflow }}
          **Run:** [View Details]($workflow_url)
          **Tool:** uv + just + pytest-html
          **Updated Reports:** ${{ steps.check_and_deploy.outputs.updated_reports }}

          ### 📋 Available HTML Test Reports
          ${formatted_urls}

          **💡 Tip:** Use the \"Sorted by Result\" link to quickly find failed tests!

          **📅 Last Updated:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')"

          timestamp="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          json_payload=$(jq -n \
            --arg title "📊 ${{ github.workflow }} - Deploy Status" \
            --arg description "$message" \
            --argjson color 65280 \
            --arg timestamp "$timestamp" \
            '{
              "embeds": [
                {
                  "title": $title,
                  "description": $description,
                  "color": $color,
                  "timestamp": $timestamp,
                  "footer": {
                    "text": "🤖 Automated HTML report deployment"
                  }
                }
              ]
            }')

          if [ -n "$DISCORD_WEBHOOK_URL" ]; then
            curl -X POST -H "Content-Type: application/json" \
              -d "$json_payload" \
              "$DISCORD_WEBHOOK_URL"
            echo "✅ Discord notification sent"
          else
            echo "⚠️ Discord webhook URL not configured"
          fi

      # ======================================================================
      # Discord通知（変更なし）
      # ======================================================================
      # 概要: 変更がない場合のDiscord通知
      # 処理: 変更なし情報をDiscordに送信
      # 補足: DISCORD_WEBHOOK_URL設定時のみ実行
      # ======================================================================
      - name: Send Discord Notification (No Changes)
        if: steps.check_and_deploy.outputs.deploy_status == 'unchanged'
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          echo "📢 Sending no-change notification to Discord..."

          workflow_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          message="## 📊 HTML Test Reports - No Changes ℹ️

          ### 🔄 Deployment Information
          **Workflow:** ${{ github.workflow }}
          **Run:** [View Details]($workflow_url)
          **Tool:** uv + just + pytest-html

          No changes were detected in the HTML test reports.
          All reports are up to date."

          timestamp="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          json_payload=$(jq -n \
            --arg title "📊 ${{ github.workflow }} - Deploy Status" \
            --arg description "$message" \
            --argjson color 16776960 \
            --arg timestamp "$timestamp" \
            '{
              "embeds": [
                {
                  "title": $title,
                  "description": $description,
                  "color": $color,
                  "timestamp": $timestamp,
                  "footer": {
                    "text": "🤖 Automated HTML report deployment"
                  }
                }
              ]
            }')

          if [ -n "$DISCORD_WEBHOOK_URL" ]; then
            curl -X POST -H "Content-Type: application/json" \
              -d "$json_payload" \
              "$DISCORD_WEBHOOK_URL"
            echo "✅ Discord notification sent"
          else
            echo "⚠️ Discord webhook URL not configured"
          fi

      # ======================================================================
      # デプロイサマリー作成
      # ======================================================================
      # 概要: ワークフロー実行結果のサマリー生成
      # 処理: デプロイ状況、URL一覧、使用ヒントをサマリー表示
      # 補足: GitHub Actionsのサマリー機能を使用
      # ======================================================================
      - name: Create deployment summary
        if: always()
        run: |
          {
            echo "## 📊 HTML Report Deployment Summary"
            echo ""
            echo "### 🚀 Deployment Information"
            echo "- **Status:** ${{ steps.check_and_deploy.outputs.deploy_status }}"
            echo "- **Target Branch:** ${{ needs.set_variables.outputs.ghpages_branch }}"
            echo "- **Tool Stack:** uv + just + pytest-html"
            echo ""

            if [ "${{ steps.check_and_deploy.outputs.deploy_status }}" == "updated" ]; then
              echo "### ✅ Updated Reports"
              echo "- **Updated:** ${{ steps.check_and_deploy.outputs.updated_reports }}"
              echo ""
              echo "### 🔗 Available Reports"
              echo "${{ steps.generate_url_list.outputs.url_list }}"
              echo ""
              echo "### 💡 Usage Tips"
              echo "- Click \"HTML Report\" for the full test report"
              echo "- Click \"Sorted by Result\" to quickly find failed tests"
              echo "- Reports are self-contained and work offline"
            else
              echo "### ℹ️ No Changes"
              echo "All HTML reports are up to date. No deployment was necessary."
            fi

            echo ""
            echo "**Generated:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          } >> "$GITHUB_STEP_SUMMARY"
