name: pytest-html Report and Deploy Multi-OS

on:
  push:
    branches:
      - "main"
    paths:
      - "project_a/**"
      - "tests/**"
      - "poetry.lock"
      - ".github/workflows/test-pytest-html-report.yml"
      - ".github/workflows/matrix.json"

jobs:
  set_variables:
    runs-on: ubuntu-latest
    outputs:
      os: ${{ steps.json2vars.outputs.os }}
      versions_python: ${{ steps.json2vars.outputs.versions_python }}
      ghpages_branch: ${{ steps.json2vars.outputs.ghpages_branch }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Set variables from JSON
        id: json2vars
        uses: 7rikazhexde/json2vars-setter@main
        with:
          json-file: .github/workflows/matrix.json

      - name: Debug output values
        run: |
          echo "os: ${{ steps.json2vars.outputs.os }}"
          echo "versions_python: ${{ steps.json2vars.outputs.versions_python }}"
          echo "ghpages_branch: ${{ steps.json2vars.outputs.ghpages_branch }}"

  test:
    needs: set_variables
    strategy:
      matrix:
        os: ${{ fromJson(needs.set_variables.outputs.os) }}
        python-version: ${{ fromJson(needs.set_variables.outputs.versions_python) }}
    runs-on: ${{ matrix.os }}
    env:
      TZ: "Asia/Tokyo"
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4.2.2
      - name: Set up Python
        uses: actions/setup-python@v5.4.0
        with:
          python-version: ${{matrix.python-version}}
      - name: Set timezone
        uses: szenius/set-timezone@v2.0
        with:
          timezoneLinux: "Asia/Tokyo"
          timezoneMacos: "Asia/Tokyo"
          timezoneWindows: "Tokyo Standard Time"
      - name: Check timezone
        shell: bash
        run: |
          echo "System date: $(date)"
          echo "TZ environment variable: ${TZ}"
          python -c "import datetime, platform; print(f'Python timezone: {datetime.datetime.now().astimezone().tzinfo}'); print(f'OS: {platform.system()}')"
      - name: Install poetry
        run: pip install poetry
      - name: Cache dependencies
        uses: actions/cache@v4.2.1
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        run: poetry install
      - name: Run tests with pytest-html
        id: pytest-html
        shell: bash
        run: |
          report_path="test_results/${{ matrix.os }}/python/${{ matrix.python-version }}"
          mkdir -p "${report_path}"
          poetry run pytest --html="${report_path}/report_page.html" --css=css/style.css
      - name: Upload pytest-html results
        uses: actions/upload-artifact@v4.6.1
        with:
          name: test-results-${{ matrix.os }}-python-${{ matrix.python-version }}
          path: test_results/${{ matrix.os }}/python/${{ matrix.python-version }}

  check_all_tests:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Check test results
        if: contains(needs.test.result, 'failure')
        run: |
          echo "Some tests failed. Please check the test results and fix any issues before merging."
          exit 1

  deploy:
    needs: [test, check_all_tests, set_variables]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
    outputs:
      deploy_status: ${{ steps.check_and_deploy.outputs.deploy_status }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5.4.0
        with:
          python-version: "3.12"

      - name: Download pytest-html artifacts
        uses: actions/download-artifact@v4.1.9

      - name: Setup Git
        run: |
          git config --local user.email "33836132+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Check and Deploy to GitHub Pages
        id: check_and_deploy
        run: |
          # jsonで定義されたブランチ名を使用
          ghpages_branch="${{ needs.set_variables.outputs.ghpages_branch }}"

          # ブランチの取得または作成
          git fetch origin "${ghpages_branch}" || git checkout -b "${ghpages_branch}"
          git checkout "${ghpages_branch}"
          git pull origin "${ghpages_branch}" --rebase || true

          changes_made=false

          # アーティファクトの移動とコミット
          for artifact_dir in test-results-*; do
            if [ -d "$artifact_dir" ]; then
              # パスの構築
              os=$(echo "$artifact_dir" | sed -E 's/test-results-([^-]+(-[^-]+)?)-python-.*/\1/')
              python_version=$(echo "$artifact_dir" | sed -E 's/.*-python-([^-]+)/\1/')

              # 最終的なパスを構築
              html_path="pytest-html-report/${os}/python/${python_version}"

              if [ -f "${artifact_dir}/report_page.html" ]; then
                mkdir -p "${html_path}"
                # 既存のファイルとの差分を確認
                if [ ! -f "${html_path}/report_page.html" ] || ! diff "${artifact_dir}/report_page.html" "${html_path}/report_page.html" > /dev/null; then
                  echo "Changes detected for ${os} with Python ${python_version}, updating..."
                  rm -rf "${html_path}"
                  mv "${artifact_dir}" "${html_path}"
                  git add "${html_path}"
                  changes_made=true
                else
                  echo "No changes for ${os} with Python ${python_version}, skipping..."
                fi
              fi
            fi
          done

          if [ "${changes_made}" = true ]; then
            git commit -m "Update pytest-html reports on GitHub Pages"
            git push origin "${ghpages_branch}"
            echo "deploy_status=updated" >> "$GITHUB_OUTPUT"
          else
            echo "No changes to commit"
            echo "deploy_status=unchanged" >> "$GITHUB_OUTPUT"
          fi

      - name: Generate URL list
        id: generate_url_list
        run: |
          IFS='/' read -ra REPO_INFO <<< "${GITHUB_REPOSITORY}"
          REPO_OWNER="${REPO_INFO[0]}"
          REPO_NAME="${REPO_INFO[1]}"
          URL_LIST=""

          # JSON配列から値を取得
          os='${{ needs.set_variables.outputs.os }}'
          versions_python='${{ needs.set_variables.outputs.versions_python }}'

          # jqを使用してリストを展開
          os_list=$(echo "${os}" | jq -r '.[]' | tr '\n' ' ' | sed 's/ $//')
          python_versions_list=$(echo "${versions_python}" | jq -r '.[]' | tr '\n' ' ' | sed 's/ $//')

          # マトリックス情報から直接URLを生成
          for current_os in ${os_list}; do
            for version in ${python_versions_list}; do
              report_path="pytest-html-report/${current_os}/python/${version}"
              if [ -d "$report_path" ]; then
                URL_LIST="${URL_LIST}${report_path}:\n\
                https://${REPO_OWNER}.github.io/${REPO_NAME}/${report_path}/report_page.html\n\n"
              fi
            done
          done

          {
            echo "url_list<<EOF"
            echo -e "${URL_LIST}"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      # メッセージ送信 (変更があった場合)
      - name: Send Discord Notification (Updated)
        if: steps.check_and_deploy.outputs.deploy_status == 'updated'
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          # ワークフローの詳細ページURL
          workflow_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          # URLリストの整形
          formatted_urls="${{ steps.generate_url_list.outputs.url_list }}"

          # メッセージの作成
          message="### Deployment Status: Updated ✅

          ### Workflow Information
          **Name:** ${{ github.workflow }}
          **Run:** [View Details]($workflow_url)

          **HTML Test Reports**
          ${formatted_urls}"

          timestamp="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          json_payload=$(jq -n \
            --arg title "${{ github.workflow }} - Deploy Status" \
            --arg description "$message" \
            --argjson color 65280 \
            --arg timestamp "$timestamp" \
            '{
              "embeds": [
                {
                  "title": $title,
                  "description": $description,
                  "color": $color,
                  "timestamp": $timestamp
                }
              ]
            }')

          curl -X POST -H "Content-Type: application/json" \
            -d "$json_payload" \
            "$DISCORD_WEBHOOK_URL"

      # メッセージ送信 (変更がない場合)
      - name: Send Discord Notification (No Changes)
        if: steps.check_and_deploy.outputs.deploy_status == 'unchanged'
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          workflow_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          message="## Deployment Status: No Changes ℹ️

          ### Workflow Information
          **Name:** ${{ github.workflow }}
          **Run:** [View Details]($workflow_url)

          No changes were detected in the HTML test reports."
          timestamp="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          json_payload=$(jq -n \
            --arg title "${{ github.workflow }} - Deploy Status" \
            --arg description "$message" \
            --argjson color 16711680 \
            --arg timestamp "$timestamp" \
            '{
              "embeds": [
                {
                  "title": $title,
                  "description": $description,
                  "color": $color,
                  "timestamp": $timestamp
                }
              ]
            }')

          curl -X POST -H "Content-Type: application/json" \
            -d "$json_payload" \
            "$DISCORD_WEBHOOK_URL"
