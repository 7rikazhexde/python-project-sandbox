name: pytest-html Report and Deploy Multi-OS

on:
  push:
    branches:
      - "main"
    paths:
      - "project_a/**"
      - "tests/**"
      - "uv.lock"                                                    # poetry.lock → uv.lock
      - "justfile"                                                   # justfile を追加
      - ".github/workflows/test-pytest-html-report.yml"
      - ".github/json2vars-setter/matrix.json"

jobs:
  set_variables:
    runs-on: ubuntu-latest
    outputs:
      os: ${{ steps.json2vars.outputs.os }}
      versions_python: ${{ steps.json2vars.outputs.versions_python }}
      ghpages_branch: ${{ steps.json2vars.outputs.ghpages_branch }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0

      - name: Set variables from JSON
        id: json2vars
        uses: 7rikazhexde/json2vars-setter@v1.0.2
        with:
          json-file: .github/json2vars-setter/matrix.json

      - name: Debug output values
        run: |
          echo "os: ${{ steps.json2vars.outputs.os }}"
          echo "versions_python: ${{ steps.json2vars.outputs.versions_python }}"
          echo "ghpages_branch: ${{ steps.json2vars.outputs.ghpages_branch }}"

  test:
    needs: set_variables
    strategy:
      matrix:
        os: ${{ fromJson(needs.set_variables.outputs.os) }}
        python-version: ${{ fromJson(needs.set_variables.outputs.versions_python) }}
    runs-on: ${{ matrix.os }}
    env:
      TZ: "Asia/Tokyo"
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5.0.0

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"
          enable-cache: true

      - name: Set up Python with uv
        shell: bash
        run: |
          # Windowsでのパス問題を回避するため、Python設定を安全に実行
          echo "🐍 Setting up Python ${{ matrix.python-version }} with uv..."
          uv python install "${{ matrix.python-version }}"
          uv python pin "${{ matrix.python-version }}"

          # Windowsの場合、仮想環境を明示的に再作成
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            echo "🪟 Windows detected, ensuring clean virtual environment..."
            rm -rf .venv || true
            uv venv --python "${{ matrix.python-version }}"
          fi

      - name: Set timezone
        uses: szenius/set-timezone@v2.0
        with:
          timezoneLinux: "Asia/Tokyo"
          timezoneMacos: "Asia/Tokyo"
          timezoneWindows: "Tokyo Standard Time"

      - name: Check timezone and Python version
        shell: bash
        run: |
          echo "System date: $(date)"
          echo "TZ environment variable: ${TZ}"
          uv run python -c "import datetime, platform, sys; print(f'Python version: {sys.version}'); print(f'Python timezone: {datetime.datetime.now().astimezone().tzinfo}'); print(f'OS: {platform.system()}')"

      - name: Install just task runner
        shell: bash
        env:
          RUNNER_OS: ${{ runner.os }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          case "${RUNNER_OS}" in
            "Linux")
              echo "🐧 Installing just on Linux..."
              # GitHub Actionsのトークンを使用してAPI制限を回避
              if [ -n "$GITHUB_TOKEN" ]; then
                echo "Using GitHub token for API access..."
                release_info=$(curl -H "Authorization: token $GITHUB_TOKEN" \
                  -H "Accept: application/vnd.github.v3+json" \
                  -s "https://api.github.com/repos/casey/just/releases/latest")
                download_url=$(echo "$release_info" | grep -o '"browser_download_url": "[^"]*x86_64-unknown-linux-musl.tar.gz"' | cut -d'"' -f4)
              else
                # フォールバック: 最新の安定版を直接指定
                echo "Using fallback download method..."
                download_url="https://github.com/casey/just/releases/download/1.34.0/just-1.34.0-x86_64-unknown-linux-musl.tar.gz"
              fi

              if [ -n "$download_url" ]; then
                echo "📥 Downloading just from: $download_url"
                mkdir -p "${HOME}/.local/bin"
                cd /tmp
                curl -L "$download_url" | tar xz
                mv just "${HOME}/.local/bin/"
                chmod +x "${HOME}/.local/bin/just"
                echo "${HOME}/.local/bin" >> "${GITHUB_PATH}"
                echo "✅ just installed successfully"
              else
                echo "❌ Failed to get download URL for just"
                exit 1
              fi
              ;;
            "macOS")
              echo "🍎 Installing just on macOS..."
              brew install just
              ;;
            "Windows")
              echo "🪟 Installing just on Windows..."
              choco install just
              ;;
            *)
              echo "❓ Unknown OS: ${RUNNER_OS}"
              exit 1
              ;;
          esac

      - name: Verify installations
        shell: bash
        run: |
          echo "🔧 Tool versions:"
          uv --version

          # justのバージョン確認（パスが更新されるまで少し待つ）
          sleep 2
          if command -v just &> /dev/null; then
            just --version
            echo "✅ just is available"
          else
            echo "⚠️ just not yet available in PATH, checking manually..."
            if [ -f "${HOME}/.local/bin/just" ]; then
              "${HOME}/.local/bin/just" --version
              echo "✅ just found in ${HOME}/.local/bin"
            else
              echo "❌ just installation failed"
              exit 1
            fi
          fi

          uv run python --version

          if [ -f "uv.lock" ]; then
            echo "📦 uv.lock hash: $(sha256sum uv.lock | cut -d' ' -f1 2>/dev/null || echo 'N/A')"
          else
            echo "📦 uv.lock: not found"
          fi

      - name: Cache uv dependencies
        uses: actions/cache@v4.2.3
        with:
          path: |
            ~/.cache/uv
            .venv
          key: uv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ matrix.python-version }}-
            uv-${{ runner.os }}-

      - name: Install dependencies
        shell: bash
        run: |
          echo "📥 Installing dependencies with uv..."

          # Windowsでのuv問題を回避
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            echo "🪟 Windows detected, using workaround for uv..."
            # 仮想環境を削除して再作成
            rm -rf .venv || true
            uv venv --python "${{ matrix.python-version }}" --seed

            # pipが利用可能になるまで待つ
            echo "⏳ Waiting for pip to be available..."
            sleep 2

            # pipの存在確認とensurepip実行
            if ! .venv/Scripts/python.exe -m pip --version; then
              echo "🔧 Installing pip using ensurepip..."
              .venv/Scripts/python.exe -m ensurepip --upgrade
            fi

            # 依存関係をインストール
            echo "📦 Installing dependencies..."
            .venv/Scripts/python.exe -m pip install --upgrade pip
            .venv/Scripts/python.exe -m pip install -e ".[dev]"
          else
            # Linux/macOSでは通常通り
            uv sync --extra dev
          fi

          echo "🔍 Installed testing packages:"
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            .venv/Scripts/python.exe -m pip list | grep -E "(pytest|pytest-html)" || echo "Testing packages not found in list"
          else
            uv pip list | grep -E "(pytest|pytest-html)" || echo "Testing packages not found in list"
          fi

      - name: Run tests with pytest-html
        id: pytest-html
        shell: bash
        run: |
          echo "🧪 Running tests with HTML report generation..."

          # レポート保存パスの設定
          report_path="test_results/${{ matrix.os }}/python/${{ matrix.python-version }}"
          mkdir -p "${report_path}"

          echo "📂 Report will be saved to: ${report_path}"

          # justコマンドのパスを確定
          if command -v just &> /dev/null; then
            JUST_CMD="just"
          elif [ -f "${HOME}/.local/bin/just" ]; then
            JUST_CMD="${HOME}/.local/bin/just"
          else
            JUST_CMD=""
          fi

          # HTMLレポート生成
          if [ -n "$JUST_CMD" ] && $JUST_CMD --list | grep -q "testhtml"; then
            echo "🚀 Using just for HTML report generation..."
            echo "📋 Available just tasks:"
            if command -v grep &> /dev/null; then
              if $JUST_CMD --list | grep -E "(test|html)"; then
                echo "Test/HTML tasks found"
              else
                echo "No test/html tasks found"
              fi
            else
              $JUST_CMD --list
            fi

            # justfile内のHTMLレポート生成タスクを使用
            if $JUST_CMD --list | grep -q "test-html-report"; then
              echo "🎯 Running: $JUST_CMD test-html-report"
              $JUST_CMD test-html-report
              # 生成されたレポートファイルを確認して移動
              if [ -f "htmlcov/report_page.html" ]; then
                echo "📁 Moving HTML report to ${report_path}/"
                cp htmlcov/report_page.html "${report_path}/"
                # CSS、JS、その他のアセットも一緒に移動
                for asset_dir in css js assets; do
                  if [ -d "htmlcov/${asset_dir}" ]; then
                    cp -r "htmlcov/${asset_dir}" "${report_path}/"
                    echo "📦 Copied ${asset_dir} assets"
                  fi
                done
              fi
            elif $JUST_CMD --list | grep -q "testhtml"; then
              echo "🎯 Running: $JUST_CMD testhtml"
              $JUST_CMD testhtml
              # 生成されたレポートファイルを確認して移動
              if [ -f "htmlcov/report_page.html" ]; then
                echo "📁 Moving HTML report to ${report_path}/"
                cp htmlcov/report_page.html "${report_path}/"
                # CSS、JS、その他のアセットも一緒に移動
                for asset_dir in css js assets; do
                  if [ -d "htmlcov/${asset_dir}" ]; then
                    cp -r "htmlcov/${asset_dir}" "${report_path}/"
                    echo "📦 Copied ${asset_dir} assets"
                  fi
                done
              fi
            else
              echo "📊 Fallback: Using direct pytest for HTML report generation..."
              # ダークモードCSS適用のために--cssオプションを追加
              if [ -f "css/style.css" ]; then
                echo "🎨 Applying custom dark mode CSS..."
                uv run pytest --html="${report_path}/report_page.html" \
                              --self-contained-html \
                              --css=css/style.css \
                              project_a tests/
              else
                echo "⚠️ Custom CSS not found, using default styling..."
                uv run pytest --html="${report_path}/report_page.html" --self-contained-html project_a tests/
              fi
            fi
          else
            echo "📊 Using direct uv run for HTML report generation..."
            # ダークモードCSS適用のために--cssオプションを追加
            if [ -f "css/style.css" ]; then
              echo "🎨 Applying custom dark mode CSS..."
              uv run pytest --html="${report_path}/report_page.html" \
                            --self-contained-html \
                            --css=css/style.css \
                            --capture=no \
                            project_a tests/
            else
              echo "⚠️ Custom CSS not found, using default styling..."
              uv run pytest --html="${report_path}/report_page.html" \
                            --self-contained-html \
                            --capture=no \
                            project_a tests/
            fi
          fi

          # 生成されたファイルの確認と検証
          if [ -f "${report_path}/report_page.html" ]; then
            echo "✅ HTML report generated successfully"
            echo "📄 Report size: $(du -h "${report_path}/report_page.html" | cut -f1)"

            # HTMLレポートの品質チェック
            file_size=$(stat -c%s "${report_path}/report_page.html" 2>/dev/null || stat -f%z "${report_path}/report_page.html" 2>/dev/null || echo "0")
            if [ "$file_size" -gt 1024 ]; then
              echo "📊 Report appears to contain content (${file_size} bytes)"

              # HTMLファイル内のテスト結果数を確認
              if command -v grep &> /dev/null; then
                test_count=$(grep -o 'class="col-result' "${report_path}/report_page.html" | wc -l || echo "0")
                echo "🧪 Tests in report: ${test_count}"
              fi
            else
              echo "⚠️ Report file seems too small, may be incomplete"
            fi

            # アセットファイルの確認
            for asset_dir in css js assets; do
              if [ -d "${report_path}/${asset_dir}" ]; then
                echo "🎨 ${asset_dir} assets copied successfully"
              fi
            done
          else
            echo "❌ HTML report generation failed"
            echo "🔍 Contents of report directory:"
            if [ -d "${report_path}" ]; then
              ls -la "${report_path}"
            else
              echo "Report directory does not exist"
            fi
            echo "🔍 Contents of current directory:"
            # Use find instead of ls | grep for better handling of filenames
            if find . -maxdepth 1 \( -name "*html*" -o -name "*report*" \) -print | head -10; then
              echo "Found HTML/report files above"
            else
              echo "No HTML or report files found"
            fi
            exit 1
          fi

      - name: Upload pytest-html results
        uses: actions/upload-artifact@v4.6.1
        with:
          name: test-results-${{ matrix.os }}-python-${{ matrix.python-version }}
          path: test_results/${{ matrix.os }}/python/${{ matrix.python-version }}
          retention-days: 30
          if-no-files-found: error

  check_all_tests:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Check test results
        if: contains(needs.test.result, 'failure')
        run: |
          echo "::error::Some tests failed during HTML report generation."
          echo "::error::Failed test matrices: ${{ toJson(needs.test.result) }}"
          echo "::warning::Please check the test results and fix any issues before merging."
          exit 1

      - name: All tests passed
        if: success()
        run: |
          echo "🎉 All tests passed successfully across all environments!"
          echo "📊 HTML reports generated for all OS and Python version combinations."

  deploy:
    needs: [test, check_all_tests, set_variables]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
    outputs:
      deploy_status: ${{ steps.check_and_deploy.outputs.deploy_status }}
      updated_reports: ${{ steps.check_and_deploy.outputs.updated_reports }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0

      - name: Install uv (for deployment utilities)
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"
          enable-cache: true

      - name: Set up Python for deployment
        run: |
          uv python install 3.12
          uv python pin 3.12

      - name: Download pytest-html artifacts
        uses: actions/download-artifact@v5.0.0

      - name: Setup Git
        run: |
          echo "⚙️ Setting up Git configuration..."
          git config --local user.email "33836132+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Check and Deploy to GitHub Pages
        id: check_and_deploy
        run: |
          # jsonで定義されたブランチ名を使用
          ghpages_branch="${{ needs.set_variables.outputs.ghpages_branch }}"

          # ブランチの取得または作成
          git fetch origin "${ghpages_branch}" || git checkout -b "${ghpages_branch}"
          git checkout "${ghpages_branch}"
          git pull origin "${ghpages_branch}" --rebase || true

          changes_made=false

          # アーティファクトの移動とコミット
          for artifact_dir in test-results-*; do
            if [ -d "$artifact_dir" ]; then
              # パスの構築
              os=$(echo "$artifact_dir" | sed -E 's/test-results-([^-]+(-[^-]+)?)-python-.*/\1/')
              python_version=$(echo "$artifact_dir" | sed -E 's/.*-python-([^-]+)/\1/')

              # 最終的なパスを構築
              html_path="pytest-html-report/${os}/python/${python_version}"

              if [ -f "${artifact_dir}/report_page.html" ]; then
                mkdir -p "${html_path}"
                # 既存のファイルとの差分を確認
                if [ ! -f "${html_path}/report_page.html" ] || ! diff "${artifact_dir}/report_page.html" "${html_path}/report_page.html" > /dev/null; then
                  echo "Changes detected for ${os} with Python ${python_version}, updating..."
                  rm -rf "${html_path}"
                  mv "${artifact_dir}" "${html_path}"
                  git add "${html_path}"
                  changes_made=true
                else
                  echo "No changes for ${os} with Python ${python_version}, skipping..."
                fi
              fi
            fi
          done

          if [ "${changes_made}" = true ]; then
            git commit -m "Update pytest-html reports on GitHub Pages"
            git push origin "${ghpages_branch}"
            echo "deploy_status=updated" >> "$GITHUB_OUTPUT"
          else
            echo "No changes to commit"
            echo "deploy_status=unchanged" >> "$GITHUB_OUTPUT"
          fi

      - name: Generate URL list
        id: generate_url_list
        shell: bash
        run: |
          echo "🔗 Generating URL list..."

          IFS='/' read -ra REPO_INFO <<< "${GITHUB_REPOSITORY}"
          REPO_OWNER="${REPO_INFO[0]}"
          REPO_NAME="${REPO_INFO[1]}"
          URL_LIST=""

          # JSON配列から値を取得
          os='${{ needs.set_variables.outputs.os }}'
          versions_python='${{ needs.set_variables.outputs.versions_python }}'

          # jqを使用してリストを展開
          os_list=$(echo "${os}" | jq -r '.[]' | tr '\n' ' ')
          os_list="${os_list% }"
          python_versions_list=$(echo "${versions_python}" | jq -r '.[]' | tr '\n' ' ')
          python_versions_list="${python_versions_list% }"

          echo "📋 Available environments:"
          echo "  OS: ${os_list}"
          echo "  Python versions: ${python_versions_list}"

          # マトリックス情報から直接URLを生成
          for current_os in ${os_list}; do
            for version in ${python_versions_list}; do
              report_path="pytest-html-report/${current_os}/python/${version}"
              if [ -d "$report_path" ]; then
                # OS絵文字の選択
                case "${current_os}" in
                  "ubuntu-latest") os_emoji="🐧" ;;
                  "macos-latest") os_emoji="🍎" ;;
                  "windows-latest") os_emoji="🪟" ;;
                  *) os_emoji="💻" ;;
                esac

                URL_LIST="${URL_LIST}**${os_emoji} ${current_os} / Python ${version}:**\n"
                URL_LIST="${URL_LIST}🔗 [HTML Report](https://${REPO_OWNER}.github.io/${REPO_NAME}/${report_path}/report_page.html)\n"
                URL_LIST="${URL_LIST}📊 [Sorted by Result](https://${REPO_OWNER}.github.io/${REPO_NAME}/${report_path}/report_page.html?sort=result)\n\n"
                echo "  ✅ ${current_os} / Python ${version}"
              else
                echo "  ⚠️ ${current_os} / Python ${version} (not found)"
              fi
            done
          done

          {
            echo "url_list<<EOF"
            echo -e "${URL_LIST}"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      # メッセージ送信 (変更があった場合)
      - name: Send Discord Notification (Updated)
        if: steps.check_and_deploy.outputs.deploy_status == 'updated'
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          echo "📢 Sending update notification to Discord..."

          # ワークフローの詳細ページURL
          workflow_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          # URLリストの整形
          formatted_urls="${{ steps.generate_url_list.outputs.url_list }}"

          # メッセージの作成
          message="## 📊 HTML Test Reports Updated ✅

          ### 🔄 Deployment Information
          **Workflow:** ${{ github.workflow }}
          **Run:** [View Details]($workflow_url)
          **Tool:** uv + just + pytest-html
          **Updated Reports:** ${{ steps.check_and_deploy.outputs.updated_reports }}

          ### 📋 Available HTML Test Reports
          ${formatted_urls}

          **💡 Tip:** Use the \"Sorted by Result\" link to quickly find failed tests!

          **📅 Last Updated:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')"

          timestamp="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          json_payload=$(jq -n \
            --arg title "📊 ${{ github.workflow }} - Deploy Status" \
            --arg description "$message" \
            --argjson color 65280 \
            --arg timestamp "$timestamp" \
            '{
              "embeds": [
                {
                  "title": $title,
                  "description": $description,
                  "color": $color,
                  "timestamp": $timestamp,
                  "footer": {
                    "text": "🤖 Automated HTML report deployment"
                  }
                }
              ]
            }')

          if [ -n "$DISCORD_WEBHOOK_URL" ]; then
            curl -X POST -H "Content-Type: application/json" \
              -d "$json_payload" \
              "$DISCORD_WEBHOOK_URL"
            echo "✅ Discord notification sent"
          else
            echo "⚠️ Discord webhook URL not configured"
          fi

      # メッセージ送信 (変更がない場合)
      - name: Send Discord Notification (No Changes)
        if: steps.check_and_deploy.outputs.deploy_status == 'unchanged'
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          echo "📢 Sending no-change notification to Discord..."

          workflow_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          message="## 📊 HTML Test Reports - No Changes ℹ️

          ### 🔄 Deployment Information
          **Workflow:** ${{ github.workflow }}
          **Run:** [View Details]($workflow_url)
          **Tool:** uv + just + pytest-html

          No changes were detected in the HTML test reports.
          All reports are up to date."

          timestamp="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          json_payload=$(jq -n \
            --arg title "📊 ${{ github.workflow }} - Deploy Status" \
            --arg description "$message" \
            --argjson color 16776960 \
            --arg timestamp "$timestamp" \
            '{
              "embeds": [
                {
                  "title": $title,
                  "description": $description,
                  "color": $color,
                  "timestamp": $timestamp,
                  "footer": {
                    "text": "🤖 Automated HTML report deployment"
                  }
                }
              ]
            }')

          if [ -n "$DISCORD_WEBHOOK_URL" ]; then
            curl -X POST -H "Content-Type: application/json" \
              -d "$json_payload" \
              "$DISCORD_WEBHOOK_URL"
            echo "✅ Discord notification sent"
          else
            echo "⚠️ Discord webhook URL not configured"
          fi

      - name: Create deployment summary
        if: always()
        run: |
          {
            echo "## 📊 HTML Report Deployment Summary"
            echo ""
            echo "### 🚀 Deployment Information"
            echo "- **Status:** ${{ steps.check_and_deploy.outputs.deploy_status }}"
            echo "- **Target Branch:** ${{ needs.set_variables.outputs.ghpages_branch }}"
            echo "- **Tool Stack:** uv + just + pytest-html"
            echo ""

            if [ "${{ steps.check_and_deploy.outputs.deploy_status }}" == "updated" ]; then
              echo "### ✅ Updated Reports"
              echo "- **Updated:** ${{ steps.check_and_deploy.outputs.updated_reports }}"
              echo ""
              echo "### 🔗 Available Reports"
              echo "${{ steps.generate_url_list.outputs.url_list }}"
              echo ""
              echo "### 💡 Usage Tips"
              echo "- Click \"HTML Report\" for the full test report"
              echo "- Click \"Sorted by Result\" to quickly find failed tests"
              echo "- Reports are self-contained and work offline"
            else
              echo "### ℹ️ No Changes"
              echo "All HTML reports are up to date. No deployment was necessary."
            fi

            echo ""
            echo "**Generated:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          } >> "$GITHUB_STEP_SUMMARY"
