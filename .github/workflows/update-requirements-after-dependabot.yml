# =============================================================================
# Update Requirements after Dependabot Merge
# =============================================================================
# 概要: Dependabotマージ後のrequirements.txtファイル自動生成・更新
# 処理: uv.lock同期、pip互換requirements.txt生成、Gistアップロード
# 補足: 手動実行可能、生成ファイルはローカルクリーンアップ
# =============================================================================

name: Update Requirements after Dependabot Merge

on:
  pull_request:
    types: [closed]
  workflow_dispatch:

jobs:
  # ==========================================================================
  # requirements更新ジョブ
  # ==========================================================================
  # 概要: Dependabotマージ後のrequirements.txt自動更新
  # 処理: 依存関係同期、pip互換ファイル生成、Gistアップロード
  # 補足: Dependabotマージ時のみ実行、従来のpip環境との互換性確保
  # ==========================================================================
  update-requirements:
    if: github.event.pull_request.merged == true && github.event.pull_request.user.login == 'dependabot[bot]'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_FOR_PUSHES }}

      # ======================================================================
      # uvキャッシュ
      # ======================================================================
      # 概要: Python依存関係のキャッシュ
      # 処理: ~/.cache/uvと.venvをキャッシュ、依存関係ファイルハッシュでキー生成
      # 補足: 統一キャッシュ戦略を使用
      # ======================================================================
      - name: Cache uv dependencies
        uses: actions/cache@v4.2.4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: uv-unified-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6.6.1
        with:
          enable-cache: false

      - name: Set up Python with uv
        run: |
          # Python 3.13を使用（元の設定に合わせて）
          uv python install 3.13
          uv python pin 3.13

      # ======================================================================
      # 依存関係同期と検証
      # ======================================================================
      # 概要: uv.lockファイルの確認と依存関係同期
      # 処理: uv.lock存在確認、ハッシュ出力、依存関係同期
      # 補足: Dependabotによる更新後の状態を確認
      # ======================================================================
      - name: Verify uv.lock and sync dependencies
        run: |
          echo "🔍 Checking uv.lock file status..."
          if [ -f "uv.lock" ]; then
            echo "✅ uv.lock file exists"
            echo "📦 uv.lock hash: $(sha256sum uv.lock | cut -d' ' -f1)"
          else
            echo "⚠️ uv.lock file not found, generating..."
            uv lock
          fi

          echo "🔄 Syncing dependencies..."
          uv sync --extra dev

      # ======================================================================
      # requirements.txtファイル生成
      # ======================================================================
      # 概要: pip互換のrequirements.txtファイル生成
      # 処理: 本番用・開発用の2種類のrequirements.txtを生成
      # 補足: ハッシュなし、pip互換形式で出力
      # ======================================================================
      - name: Generate requirements files (pip-compatible)
        run: |
          echo "📝 Generating requirements files for pip compatibility..."

          # 本番依存関係の出力（ハッシュなし、pip互換形式）
          {
            echo "# Generated by uv on $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            echo "# This file is compatible with pip and other tools that expect requirements.txt format"
            echo ""
          } > requirements.txt
          uv export --format requirements-txt --no-hashes --no-dev >> requirements.txt

          # 開発依存関係も含めた出力
          {
            echo "# Generated by uv on $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            echo "# This file includes both production and development dependencies"
            echo "# Compatible with pip and other tools that expect requirements.txt format"
            echo ""
          } > requirements-dev.txt
          uv export --format requirements-txt --no-hashes >> requirements-dev.txt

          echo "✅ Requirements files generated:"
          echo "📄 requirements.txt ($(wc -l < requirements.txt) lines)"
          echo "📄 requirements-dev.txt ($(wc -l < requirements-dev.txt) lines)"

          # ファイル内容のプレビュー
          echo "🔍 requirements.txt preview:"
          head -10 requirements.txt
          echo "..."
          echo ""
          echo "🔍 requirements-dev.txt preview:"
          head -10 requirements-dev.txt
          echo "..."

      # ======================================================================
      # Gistアップロード
      # ======================================================================
      # 概要: 生成したrequirements.txtファイルのGistアップロード
      # 処理: GitHub APIを使用してGistに2つのファイルをアップロード
      # 補足: 外部プロジェクトでの利用を想定
      # ======================================================================
      - name: Upload requirements files to Gist
        env:
          GIST_TOKEN: ${{ secrets.PAT_FOR_PUSHES }}
        run: |
          echo "☁️ Uploading requirements files to Gist..."

          upload_to_gist() {
            local file="$1"
            local gist_id="$2"
            local json_payload

            echo "📤 Uploading $file to Gist ID: $gist_id"

            # jqにfileとcontentを渡してJSONを構築
            json_payload=$(jq -n --arg fname "$file" --arg content "$(cat "$file")" '{"files": {($fname): {"content": $content}}}')

            if curl -X PATCH \
              -H "Authorization: token $GIST_TOKEN" \
              -H "Content-Type: application/json" \
              -d "$json_payload" \
              "https://api.github.com/gists/$gist_id"; then
              echo "✅ Successfully uploaded $file"
            else
              echo "❌ Failed to upload $file to Gist"
              return 1
            fi
          }

          # Gistへのアップロード実行
          upload_to_gist "requirements.txt" "e98bb6078bc1d99f94c26f6c739724f2"
          upload_to_gist "requirements-dev.txt" "4d9c1e43c07c990b344fce63faffeef2"

          echo "🎉 All requirements files uploaded successfully!"

      # ======================================================================
      # ファイル検証
      # ======================================================================
      # 概要: 生成されたrequirements.txtファイルの検証
      # 処理: ファイル存在確認、内容検証、形式チェック
      # 補足: 基本的なrequirements.txt形式の妥当性確認
      # ======================================================================
      - name: Verify generated files
        run: |
          echo "🔍 Verifying generated requirements files..."

          # 基本的な検証
          if [ ! -f "requirements.txt" ] || [ ! -s "requirements.txt" ]; then
            echo "❌ requirements.txt is missing or empty"
            exit 1
          fi

          if [ ! -f "requirements-dev.txt" ] || [ ! -s "requirements-dev.txt" ]; then
            echo "❌ requirements-dev.txt is missing or empty"
            exit 1
          fi

          # 形式の検証（基本的なrequirements.txt形式かチェック）
          if ! grep -E '^[a-zA-Z0-9_-]+[>=<]' requirements.txt > /dev/null; then
            echo "⚠️ requirements.txt may not contain valid package specifications"
          fi

          echo "✅ Requirements files validation passed"

      # ======================================================================
      # サマリー作成
      # ======================================================================
      # 概要: ワークフロー実行結果のサマリー生成
      # 処理: 更新内容、生成ファイル情報、アップロード状況をサマリー表示
      # 補足: GitHub Actionsのサマリー機能を使用
      # ======================================================================
      - name: Create summary
        env:
          PR_TITLE: ${{ github.event.pull_request.title }}
        run: |
          {
            echo "## 📊 Requirements Update Summary"
            echo ""
            echo "### 🔄 Updated after Dependabot merge"
            echo "- **Trigger:** ${PR_TITLE}"
            echo "- **Tool:** uv"
            echo "- **Python Version:** $(uv run python --version)"
            echo ""
            echo "### 📝 Generated Files"
            echo "- **requirements.txt:** $(wc -l < requirements.txt) packages"
            echo "- **requirements-dev.txt:** $(wc -l < requirements-dev.txt) packages (including dev)"
            echo ""
            echo "### ☁️ Upload Status"
            echo "- ✅ requirements.txt uploaded to Gist"
            echo "- ✅ requirements-dev.txt uploaded to Gist"
            echo ""
            echo "Files are now available for projects that require traditional requirements.txt format."
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Clean up local requirements files
        run: |
          echo "🧹 Cleaning up local requirements files..."
          rm requirements.txt requirements-dev.txt
          echo "✅ Local requirements files cleaned up"
