# =============================================================================
# Version Update and Release Workflow
# =============================================================================
# 概要: バージョン更新とGitHubリリースの自動作成
# 処理: pyproject.tomlバージョン更新、タグ作成、チェンジログ生成、リリース作成
# 補足: 手動実行のみ、patch/minor/major選択可能
# =============================================================================

name: Version Update and Release

on:
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of version update'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

jobs:
  # ==========================================================================
  # バージョン更新・リリースジョブ
  # ==========================================================================
  # 概要: セマンティックバージョニングによるバージョン更新とリリース
  # 処理: バージョン計算、pyproject.toml更新、タグ作成、リリース作成
  # 補足: tomlkitとpackagingライブラリを使用した自動バージョン管理
  # ==========================================================================
  update-version-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_FOR_PUSHES }}

      # ======================================================================
      # uvキャッシュ
      # ======================================================================
      # 概要: Python依存関係のキャッシュ
      # 処理: ~/.cache/uvと.venvをキャッシュ、依存関係ファイルハッシュでキー生成
      # 補足: 統一キャッシュ戦略を使用
      # ======================================================================
      - name: Cache uv dependencies
        uses: actions/cache@v4.2.4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: uv-unified-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6.6.1
        with:
          enable-cache: false

      - name: Set up Python with uv
        run: |
          # Python 3.12を使用（元の設定に合わせて）
          uv python install 3.12
          uv python pin 3.12

      # ======================================================================
      # バージョン管理ツールインストール
      # ======================================================================
      # 概要: pyproject.tomlバージョン管理に必要なライブラリインストール
      # 処理: tomlkit、packagingライブラリの追加と依存関係同期
      # 補足: バージョン計算とTOML操作に使用
      # ======================================================================
      - name: Install version management tool
        run: |
          echo "📦 Installing version management dependencies..."
          # tomlkitを使用してpyproject.tomlのバージョンを管理
          uv add --dev tomlkit
          uv sync --extra dev

      - name: Configure Git
        run: |
          echo "⚙️ Configuring Git..."
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      # ======================================================================
      # 現在バージョン取得
      # ======================================================================
      # 概要: pyproject.tomlから現在のバージョンを取得
      # 処理: tomlkitでpyproject.tomlを解析、バージョン情報を抽出
      # 補足: 次のバージョン計算の基準として使用
      # ======================================================================
      - name: Get current version
        id: current_version
        run: |
          echo "🔍 Getting current version from pyproject.toml..."
          current_version=$(uv run python -c "
          import tomlkit
          with open('pyproject.toml', 'r') as f:
              data = tomlkit.load(f)
          print(data['project']['version'])
          ")
          echo "Current version: $current_version"
          echo "version=$current_version" >> "$GITHUB_OUTPUT"

      # ======================================================================
      # 新バージョン計算
      # ======================================================================
      # 概要: セマンティックバージョニングによる新バージョン計算
      # 処理: 現在バージョンと更新タイプから新バージョンを算出
      # 補足: packaging.versionを使用した正確なバージョン管理
      # ======================================================================
      - name: Calculate new version
        id: new_version
        run: |
          echo "🔢 Calculating new version..."
          new_version=$(uv run python -c "
          import tomlkit
          from packaging.version import Version

          # 現在のバージョンを取得
          with open('pyproject.toml', 'r') as f:
              data = tomlkit.load(f)
          current = Version(data['project']['version'])

          # 新しいバージョンを計算
          update_type = '${{ github.event.inputs.update_type }}'
          if update_type == 'major':
              new = Version(f'{current.major + 1}.0.0')
          elif update_type == 'minor':
              new = Version(f'{current.major}.{current.minor + 1}.0')
          else:  # patch
              new = Version(f'{current.major}.{current.minor}.{current.micro + 1}')

          print(str(new))
          ")
          echo "New version: $new_version"
          echo "version=$new_version" >> "$GITHUB_OUTPUT"

      # ======================================================================
      # pyproject.tomlバージョン更新
      # ======================================================================
      # 概要: pyproject.tomlファイルのバージョン情報更新
      # 処理: tomlkitでTOMLファイルを操作、新バージョンを設定
      # 補足: TOML形式とコメントを保持して更新
      # ======================================================================
      - name: Update version in pyproject.toml
        run: |
          echo "📝 Updating version in pyproject.toml..."
          uv run python -c "
          import tomlkit

          # pyproject.tomlを読み込み
          with open('pyproject.toml', 'r') as f:
              data = tomlkit.load(f)

          # バージョンを更新
          data['project']['version'] = '${{ steps.new_version.outputs.version }}'

          # ファイルに書き戻し
          with open('pyproject.toml', 'w') as f:
              tomlkit.dump(data, f)

          print('✅ Version updated in pyproject.toml')
          "

          echo "🔍 Verifying version update..."
          grep "version.*${{ steps.new_version.outputs.version }}" pyproject.toml || {
            echo "❌ Version update verification failed"
            exit 1
          }
          echo "✅ Version update verified"

      - name: Update uv.lock file
        run: |
          echo "🔄 Updating uv.lock file..."
          uv lock
          echo "✅ uv.lock updated"

      # ======================================================================
      # 変更のコミット・プッシュ
      # ======================================================================
      # 概要: バージョン更新をGitリポジトリにコミット・プッシュ
      # 処理: pyproject.tomlとuv.lockの変更をコミット、リモートにプッシュ
      # 補足: 変更がない場合はスキップ
      # ======================================================================
      - name: Commit and push changes
        run: |
          echo "📤 Committing and pushing changes..."

          # 変更があるかチェック
          if git diff --quiet pyproject.toml uv.lock; then
            echo "ℹ️ No changes to commit"
          else
            git add pyproject.toml uv.lock
            git commit -m "🔖 Bump version to ${{ steps.new_version.outputs.version }}" || echo "No changes to commit"
            git push
            echo "✅ Changes committed and pushed"
          fi

      # ======================================================================
      # タグ作成・プッシュ
      # ======================================================================
      # 概要: 新バージョンのGitタグ作成とプッシュ
      # 処理: v{version}形式のタグを作成、リモートにプッシュ
      # 補足: リリース作成の前提条件
      # ======================================================================
      - name: Create and push new tag
        run: |
          echo "🏷️ Creating and pushing tag..."
          git tag v${{ steps.new_version.outputs.version }}
          git push --tags
          echo "✅ Tag v${{ steps.new_version.outputs.version }} created and pushed"

      # ======================================================================
      # チェンジログ生成
      # ======================================================================
      # 概要: 前バージョンから現在までの変更履歴生成
      # 処理: git logでコミット履歴を取得、チェンジログ形式で整形
      # 補足: リリースノートに使用
      # ======================================================================
      - name: Generate changelog
        id: changelog
        run: |
          echo "📋 Generating changelog..."

          # 前のバージョンから現在のバージョンまでの変更ログを生成
          if git rev-parse "v${{ steps.current_version.outputs.version }}" >/dev/null 2>&1; then
            changelog=$(git log --pretty=format:"- %s" v${{ steps.current_version.outputs.version }}..HEAD)
          else
            # 前のタグが存在しない場合は最初のコミットから
            changelog=$(git log --pretty=format:"- %s")
          fi

          if [ -z "$changelog" ]; then
            changelog="- Initial release"
          fi

          echo "Generated changelog:"
          echo "$changelog"

          # GitHubの出力形式に設定
          {
            echo "changelog<<EOF"
            echo "$changelog"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      # ======================================================================
      # GitHubリリース作成
      # ======================================================================
      # 概要: GitHubリリースの自動作成
      # 処理: softprops/action-gh-releaseでリリース作成、詳細情報を設定
      # 補足: タグ、チェンジログ、バージョン情報を含む
      # ======================================================================
      - name: Create Release
        uses: softprops/action-gh-release@v2.3.3
        with:
          tag_name: v${{ steps.new_version.outputs.version }}
          name: python-project-sandbox v${{ steps.new_version.outputs.version }}
          body: |
            ## 🚀 Changes in this Release

            ### 📊 Version Information
            - **Previous Version:** ${{ steps.current_version.outputs.version }}
            - **New Version:** ${{ steps.new_version.outputs.version }}
            - **Update Type:** ${{ github.event.inputs.update_type }}
            - **Tool:** uv

            ### 📝 Changelog
            ${{ steps.changelog.outputs.changelog }}

            ### 🔗 Links
            - [Full Changelog](${{ github.server_url }}/${{ github.repository }}/compare/v${{ steps.current_version.outputs.version }}..v${{ steps.new_version.outputs.version }})
            - [pyproject.toml](${{ github.server_url }}/${{ github.repository }}/blob/v${{ steps.new_version.outputs.version }}/pyproject.toml)

            ---

            **Generated by GitHub Actions with uv** 🤖
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_FOR_PUSHES }}

      # ======================================================================
      # サマリー作成
      # ======================================================================
      # 概要: ワークフロー実行結果のサマリー生成
      # 処理: バージョン情報、実行アクション、リンクをサマリー表示
      # 補足: GitHub Actionsのサマリー機能を使用
      # ======================================================================
      - name: Create summary
        run: |
          {
            echo "## 🎉 Version Update and Release Summary"
            echo ""
            echo "### 📊 Version Information"
            echo "- **Previous Version:** ${{ steps.current_version.outputs.version }}"
            echo "- **New Version:** ${{ steps.new_version.outputs.version }}"
            echo "- **Update Type:** ${{ github.event.inputs.update_type }}"
            echo "- **Tool:** uv"
            echo ""
            echo "### ✅ Completed Actions"
            echo "- 📝 Updated pyproject.toml"
            echo "- 🔄 Updated uv.lock"
            echo "- 📤 Committed and pushed changes"
            echo "- 🏷️ Created and pushed tag v${{ steps.new_version.outputs.version }}"
            echo "- 🚀 Created GitHub release"
            echo ""
            echo "### 🔗 Quick Links"
            echo "- [📋 Release](${{ github.server_url }}/${{ github.repository }}/releases/tag/v${{ steps.new_version.outputs.version }})"
            echo "- [🔍 Compare Changes](${{ github.server_url }}/${{ github.repository }}/compare/v${{ steps.current_version.outputs.version }}..v${{ steps.new_version.outputs.version }})"
          } >> "$GITHUB_STEP_SUMMARY"
