name: pytest-cov Report and Deploy Multi-OS

on:
  push:
    branches:
      - "main"
    #paths:
    #  - "project_a/**"
    #  - "tests/**"
    #  - "poetry.lock"
    #  - ".github/workflows/test-pytest-cov-report.yml"
    #  - ".github/workflows/matrix.json"

jobs:
  set_variables:
    runs-on: ubuntu-latest
    outputs:
      os: ${{ steps.json2vars.outputs.os }}
      versions_python: ${{ steps.json2vars.outputs.versions_python }}
      ghpages_branch: ${{ steps.json2vars.outputs.ghpages_branch }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Set variables from JSON
        id: json2vars
        uses: 7rikazhexde/json2vars-setter@main
        with:
          json-file: .github/workflows/matrix.json

      - name: Debug output values
        run: |
          echo "os: ${{ steps.json2vars.outputs.os }}"
          echo "versions_python: ${{ steps.json2vars.outputs.versions_python }}"
          echo "ghpages_branch: ${{ steps.json2vars.outputs.ghpages_branch }}"

  test:
    needs: set_variables
    strategy:
      matrix:
        os: ${{ fromJson(needs.set_variables.outputs.os) }}
        python-version: ${{ fromJson(needs.set_variables.outputs.versions_python) }}
    runs-on: ${{ matrix.os }}
    env:
      TZ: "Asia/Tokyo"
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4.2.2
      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version: ${{matrix.python-version}}
      - name: Set timezone
        uses: szenius/set-timezone@v2.0
        with:
          timezoneLinux: "Asia/Tokyo"
          timezoneMacos: "Asia/Tokyo"
          timezoneWindows: "Tokyo Standard Time"
      - name: Check timezone
        shell: bash
        run: |
          echo "System date: $(date)"
          echo "TZ environment variable: ${TZ}"
          python -c "import datetime, platform; print(f'Python timezone: {datetime.datetime.now().astimezone().tzinfo}'); print(f'OS: {platform.system()}')"
      - name: Install poetry
        run: pip install poetry
      - name: Cache dependencies
        uses: actions/cache@v4.1.2
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        run: poetry install
      - name: Run tests with pytest-cov
        id: pytest-cov
        shell: bash
        run: |
          coverage_path="htmlcov/${{ matrix.os }}/python/${{ matrix.python-version }}"
          mkdir -p "${coverage_path}"
          poetry run pytest --cov=project_a --cov-report="html:${coverage_path}"
      - name: Upload pytest-cov results
        uses: actions/upload-artifact@v4.4.3
        with:
          name: coverage-results-${{ matrix.os }}-python-${{ matrix.python-version }}
          path: htmlcov/${{ matrix.os }}/python/${{ matrix.python-version }}

  check_all_tests:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Check test results
        if: contains(needs.test.result, 'failure')
        run: |
          echo "Some tests failed. Please check the test results and fix any issues before merging."
          exit 1

  deploy:
    needs: [test, check_all_tests, set_variables]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
    outputs:
      deploy_status: ${{ steps.check_and_deploy.outputs.deploy_status }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version: "3.12"

      - name: Download pytest-cov artifacts
        uses: actions/download-artifact@v4.1.8

      - name: Setup Git
        run: |
          git config --local user.email "33836132+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Check and Deploy to GitHub Pages
        id: check_and_deploy
        run: |
          # jsonで定義されたブランチ名を使用
          ghpages_branch="${{ needs.set_variables.outputs.ghpages_branch }}"

          # ブランチの取得または作成
          git fetch origin "${ghpages_branch}" || git checkout -b "${ghpages_branch}"
          git checkout "${ghpages_branch}"
          git pull origin "${ghpages_branch}" --rebase || true

          changes_made=false

          # アーティファクトの移動とコミット
          for artifact_dir in coverage-results-*; do
            if [ -d "$artifact_dir" ]; then
              # パスの構築 (例: coverage-results-ubuntu-latest-python-3.9 → pytest-cov-report/ubuntu-latest/python/3.9)
              IFS='-' read -ra PARTS <<< "$artifact_dir"
              os="${PARTS[2]}"
              python_version="${PARTS[4]}"
              coverage_path="pytest-cov-report/${os}/python/${python_version}"

              # ディレクトリ作成と移動
              mkdir -p "${coverage_path}"
              rm -rf "${coverage_path}"
              mv "${artifact_dir}" "${coverage_path}"
              git add "${coverage_path}"
              changes_made=true
            fi
          done

          if [ "${changes_made}" = true ]; then
            git commit -m "Update pytest-cov reports"
            git push origin "${ghpages_branch}"
            echo "deploy_status=updated" >> "$GITHUB_OUTPUT"
          else
            echo "No changes to commit"
            echo "deploy_status=unchanged" >> "$GITHUB_OUTPUT"
          fi

      - name: Generate URL list
        id: generate_url_list
        run: |
          IFS='/' read -ra REPO_INFO <<< "${GITHUB_REPOSITORY}"
          REPO_OWNER="${REPO_INFO[0]}"
          REPO_NAME="${REPO_INFO[1]}"
          URL_LIST=""

          # JSON配列から値を取得
          os='${{ needs.set_variables.outputs.os }}'
          versions_python='${{ needs.set_variables.outputs.versions_python }}'

          # jqを使用してリストを展開
          os_list=$(echo "${os}" | jq -r '.[]' | tr '\n' ' ' | sed 's/ $//')
          python_versions_list=$(echo "${versions_python}" | jq -r '.[]' | tr '\n' ' ' | sed 's/ $//')

          # マトリックス情報から直接URLを生成
          for current_os in ${os_list}; do
            for version in ${python_versions_list}; do
              report_path="pytest-cov-report/${current_os}/python/${version}"
              if [ -d "$report_path" ]; then
                URL_LIST="${URL_LIST}${report_path}:\n\
                https://${REPO_OWNER}.github.io/${REPO_NAME}/${report_path}/index.html\n\n"
              fi
            done
          done

          {
            echo "url_list<<EOF"
            echo -e "${URL_LIST}"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Send LINE Notify (Updated)
        if: steps.check_and_deploy.outputs.deploy_status == 'updated'
        env:
          LINE_NOTIFY_TOKEN: ${{ secrets.LINE_ACCESS_TOKEN }}
        run: |
          message="pytest-cov report deployment completed. Changes were made.

          Check URLs:
          ${{ steps.generate_url_list.outputs.url_list }}"

          curl -X POST https://notify-api.line.me/api/notify \
            -H "Authorization: Bearer ${LINE_NOTIFY_TOKEN}" \
            -F "message=${message}"

      - name: Send LINE Notify (No Changes)
        if: steps.check_and_deploy.outputs.deploy_status == 'unchanged'
        env:
          LINE_NOTIFY_TOKEN: ${{ secrets.LINE_ACCESS_TOKEN }}
        run: |
          message="pytest-cov report check completed. No changes were necessary."

          curl -X POST https://notify-api.line.me/api/notify \
            -H "Authorization: Bearer ${LINE_NOTIFY_TOKEN}" \
            -F "message=${message}"
