name: pytest-cov Report and Deploy Multi-OS

on:
  push:
    branches:
      - "main"
    paths:
      - "project_a/**"
      - "tests/**"
      - "uv.lock"                                                    # poetry.lock → uv.lock
      - "justfile"                                                   # justfile を追加
      - ".github/workflows/test-pytest-cov-report.yml"
      - ".github/json2vars-setter/matrix.json"

jobs:
  set_variables:
    runs-on: ubuntu-latest
    outputs:
      os: ${{ steps.json2vars.outputs.os }}
      versions_python: ${{ steps.json2vars.outputs.versions_python }}
      ghpages_branch: ${{ steps.json2vars.outputs.ghpages_branch }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0

      - name: Set variables from JSON
        id: json2vars
        uses: 7rikazhexde/json2vars-setter@v1.0.1
        with:
          json-file: .github/json2vars-setter/matrix.json

      - name: Debug output values
        run: |
          echo "os: ${{ steps.json2vars.outputs.os }}"
          echo "versions_python: ${{ steps.json2vars.outputs.versions_python }}"
          echo "ghpages_branch: ${{ steps.json2vars.outputs.ghpages_branch }}"

  test:
    needs: set_variables
    strategy:
      matrix:
        os: ${{ fromJson(needs.set_variables.outputs.os) }}
        python-version: ${{ fromJson(needs.set_variables.outputs.versions_python) }}
    runs-on: ${{ matrix.os }}
    env:
      TZ: "Asia/Tokyo"
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5.0.0

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"
          enable-cache: true

      - name: Set up Python with uv
        shell: bash
        run: |
          # Windowsでのパス問題を回避するため、Python設定を安全に実行
          echo "🐍 Setting up Python ${{ matrix.python-version }} with uv..."
          uv python install "${{ matrix.python-version }}"
          uv python pin "${{ matrix.python-version }}"

          # Windowsの場合、仮想環境を明示的に再作成
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            echo "🪟 Windows detected, ensuring clean virtual environment..."
            rm -rf .venv || true
            uv venv --python "${{ matrix.python-version }}"
          fi

      - name: Set timezone
        uses: szenius/set-timezone@v2.0
        with:
          timezoneLinux: "Asia/Tokyo"
          timezoneMacos: "Asia/Tokyo"
          timezoneWindows: "Tokyo Standard Time"

      - name: Check timezone and Python version
        shell: bash
        run: |
          echo "System date: $(date)"
          echo "TZ environment variable: ${TZ}"
          uv run python -c "import datetime, platform, sys; print(f'Python version: {sys.version}'); print(f'Python timezone: {datetime.datetime.now().astimezone().tzinfo}'); print(f'OS: {platform.system()}')"

      - name: Install just task runner
        shell: bash
        env:
          RUNNER_OS: ${{ runner.os }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          case "${RUNNER_OS}" in
            "Linux")
              echo "🐧 Installing just on Linux..."
              # GitHub Actionsのトークンを使用してAPI制限を回避
              if [ -n "$GITHUB_TOKEN" ]; then
                echo "Using GitHub token for API access..."
                release_info=$(curl -H "Authorization: token $GITHUB_TOKEN" \
                  -H "Accept: application/vnd.github.v3+json" \
                  -s "https://api.github.com/repos/casey/just/releases/latest")
                download_url=$(echo "$release_info" | grep -o '"browser_download_url": "[^"]*x86_64-unknown-linux-musl.tar.gz"' | cut -d'"' -f4)
              else
                # フォールバック: 最新の安定版を直接指定
                echo "Using fallback download method..."
                download_url="https://github.com/casey/just/releases/download/1.34.0/just-1.34.0-x86_64-unknown-linux-musl.tar.gz"
              fi

              if [ -n "$download_url" ]; then
                echo "📥 Downloading just from: $download_url"
                mkdir -p "${HOME}/.local/bin"
                cd /tmp
                curl -L "$download_url" | tar xz
                mv just "${HOME}/.local/bin/"
                chmod +x "${HOME}/.local/bin/just"
                echo "${HOME}/.local/bin" >> "${GITHUB_PATH}"
                echo "✅ just installed successfully"
              else
                echo "❌ Failed to get download URL for just"
                exit 1
              fi
              ;;
            "macOS")
              echo "🍎 Installing just on macOS..."
              brew install just
              ;;
            "Windows")
              echo "🪟 Installing just on Windows..."
              choco install just
              ;;
            *)
              echo "❓ Unknown OS: ${RUNNER_OS}"
              exit 1
              ;;
          esac

      - name: Verify installations
        shell: bash
        run: |
          echo "🔧 Tool versions:"
          uv --version
          just --version || echo "just not yet available in PATH"
          uv run python --version
          if [ -f "uv.lock" ]; then
            echo "📦 uv.lock hash: $(sha256sum uv.lock | cut -d' ' -f1 2>/dev/null || echo 'N/A')"
          else
            echo "📦 uv.lock: not found"
          fi

      - name: Cache uv dependencies
        uses: actions/cache@v4.2.3
        with:
          path: |
            ~/.cache/uv
            .venv
          key: uv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ matrix.python-version }}-
            uv-${{ runner.os }}-

      - name: Install dependencies
        shell: bash
        run: |
          echo "📥 Installing dependencies with uv..."

          # Windowsでのuv問題を回避
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            echo "🪟 Windows detected, using workaround for uv..."
            # 仮想環境を削除して再作成
            rm -rf .venv || true
            uv venv --python "${{ matrix.python-version }}" --seed

            # pipが利用可能になるまで待つ
            echo "⏳ Waiting for pip to be available..."
            sleep 2

            # pipの存在確認とensurepip実行
            if ! .venv/Scripts/python.exe -m pip --version; then
              echo "🔧 Installing pip using ensurepip..."
              .venv/Scripts/python.exe -m ensurepip --upgrade
            fi

            # 依存関係をインストール
            echo "📦 Installing dependencies..."
            .venv/Scripts/python.exe -m pip install --upgrade pip
            .venv/Scripts/python.exe -m pip install -e ".[dev]"
          else
            # Linux/macOSでは通常通り
            uv sync --extra dev
          fi

          echo "🔍 Installed testing packages:"
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            .venv/Scripts/python.exe -m pip list | grep -E "(pytest|coverage)" || echo "Coverage packages not found in list"
          else
            uv pip list | grep -E "(pytest|coverage)" || echo "Coverage packages not found in list"
          fi

      - name: Run tests with pytest-cov
        id: pytest-cov
        shell: bash
        run: |
          echo "📊 Running tests with coverage report generation..."

          # カバレッジレポート保存パスの設定
          coverage_path="htmlcov/${{ matrix.os }}/python/${{ matrix.python-version }}"
          mkdir -p "${coverage_path}"

          echo "📂 Coverage report will be saved to: ${coverage_path}"

          # justが利用可能かチェックしてカバレッジレポート生成
          if command -v just &> /dev/null && just --list | grep -q "testcov"; then
            echo "🚀 Using just for coverage report generation..."

            # 一時的なHTMLディレクトリ名を使用してjustでカバレッジテストを実行
            temp_htmlcov="temp_htmlcov_$(date +%s)"

            # justコマンドを修正してカスタムHTMLディレクトリを使用
            uv run pytest --cov=project_a --cov-branch --cov-report=term-missing --cov-report="html:${temp_htmlcov}" --cov-report=xml project_a tests/

            # 生成されたHTMLカバレッジレポートを適切な場所に移動
            if [ -d "${temp_htmlcov}" ]; then
              echo "📁 Moving coverage report from ${temp_htmlcov} to ${coverage_path}"
              # 既存のパスをクリア
              rm -rf "${coverage_path}"
              mkdir -p "$(dirname "${coverage_path}")"
              mv "${temp_htmlcov}" "${coverage_path}"
            else
              echo "⚠️ ${temp_htmlcov} directory not found, falling back to direct generation..."
              # justで生成されなかった場合のフォールバック
              uv run pytest --cov=project_a --cov-report="html:${coverage_path}" project_a tests/
            fi
          else
            echo "📊 Using direct uv run for coverage report generation..."
            # 直接pytestでカバレッジレポートを生成
            uv run pytest --cov=project_a --cov-report="html:${coverage_path}" project_a tests/
          fi

          # 生成されたファイルの確認
          if [ -f "${coverage_path}/index.html" ]; then
            echo "✅ Coverage report generated successfully"
            echo "📄 Report index size: $(du -h "${coverage_path}/index.html" | cut -f1)"
            echo "📁 Total report size: $(du -sh "${coverage_path}" | cut -f1)"

            # カバレッジレポート内のファイル数を確認
            file_count=$(find "${coverage_path}" -name "*.html" | wc -l)
            echo "📋 HTML files generated: ${file_count}"
          else
            echo "❌ Coverage report generation failed"
            echo "🔍 Contents of coverage directory:"
            ls -la "${coverage_path}" || echo "Coverage directory does not exist"
            exit 1
          fi

      - name: Generate coverage summary
        shell: bash
        run: |
          echo "📈 Generating coverage summary..."

          # カバレッジサマリーの取得
          if command -v just &> /dev/null && just --list | grep -q "testcov"; then
            coverage_summary=$(uv run coverage report --format=total 2>/dev/null || echo "N/A")
          else
            coverage_summary=$(uv run coverage report --format=total 2>/dev/null || echo "N/A")
          fi

          echo "COVERAGE_SUMMARY=${coverage_summary}" >> "$GITHUB_ENV"
          echo "📊 Coverage: ${coverage_summary}%"

      - name: Upload pytest-cov results
        uses: actions/upload-artifact@v4.6.1
        with:
          name: coverage-results-${{ matrix.os }}-python-${{ matrix.python-version }}
          path: htmlcov/${{ matrix.os }}/python/${{ matrix.python-version }}
          retention-days: 30

  check_all_tests:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Check test results
        if: contains(needs.test.result, 'failure')
        run: |
          echo "::error::Some tests failed during coverage report generation."
          echo "::error::Failed test matrices: ${{ toJson(needs.test.result) }}"
          echo "::warning::Please check the test results and fix any issues before merging."
          exit 1

      - name: All tests passed
        if: success()
        run: |
          echo "🎉 All tests passed successfully across all environments!"
          echo "📊 Coverage reports generated for all OS and Python version combinations."

  deploy:
    needs: [test, check_all_tests, set_variables]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
    outputs:
      deploy_status: ${{ steps.check_and_deploy.outputs.deploy_status }}
      updated_reports: ${{ steps.check_and_deploy.outputs.updated_reports }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0

      - name: Install uv (for deployment utilities)
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"
          enable-cache: true

      - name: Set up Python for deployment
        run: |
          uv python install 3.12
          uv python pin 3.12

      - name: Download pytest-cov artifacts
        uses: actions/download-artifact@v5.0.0

      - name: Setup Git
        run: |
          echo "⚙️ Setting up Git configuration..."
          git config --local user.email "33836132+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Check and Deploy to GitHub Pages
        id: check_and_deploy
        run: |
          # jsonで定義されたブランチ名を使用
          ghpages_branch="${{ needs.set_variables.outputs.ghpages_branch }}"

          # ブランチの取得または作成
          git fetch origin "${ghpages_branch}" || git checkout -b "${ghpages_branch}"
          git checkout "${ghpages_branch}"
          git pull origin "${ghpages_branch}" --rebase || true

          changes_made=false

          # アーティファクトの移動とコミット
          for artifact_dir in coverage-results-*; do
            if [ -d "$artifact_dir" ]; then
              # パスの構築
              os=$(echo "$artifact_dir" | sed -E 's/coverage-results-([^-]+(-[^-]+)?)-python-.*/\1/')
              python_version=$(echo "$artifact_dir" | sed -E 's/.*-python-([^-]+)/\1/')

              # 最終的なパスを構築
              coverage_path="pytest-cov-report/${os}/python/${python_version}"

              # ディレクトリ作成と移動
              mkdir -p "${coverage_path}"
              rm -rf "${coverage_path}"
              mv "${artifact_dir}" "${coverage_path}"
              git add "${coverage_path}"
              changes_made=true
            fi
          done

          if [ "${changes_made}" = true ]; then
            git commit -m "Update pytest-html reports on GitHub Pages"
            git push origin "${ghpages_branch}"
            echo "deploy_status=updated" >> "$GITHUB_OUTPUT"
          else
            echo "No changes to commit"
            echo "deploy_status=unchanged" >> "$GITHUB_OUTPUT"
          fi

      - name: Generate URL list
        id: generate_url_list
        shell: bash
        run: |
          echo "🔗 Generating coverage report URL list..."

          IFS='/' read -ra REPO_INFO <<< "${GITHUB_REPOSITORY}"
          REPO_OWNER="${REPO_INFO[0]}"
          REPO_NAME="${REPO_INFO[1]}"
          URL_LIST=""

          # JSON配列から値を取得
          os='${{ needs.set_variables.outputs.os }}'
          versions_python='${{ needs.set_variables.outputs.versions_python }}'

          # jqを使用してリストを展開
          os_list=$(echo "${os}" | jq -r '.[]' | tr '\n' ' ')
          os_list="${os_list% }"
          python_versions_list=$(echo "${versions_python}" | jq -r '.[]' | tr '\n' ' ')
          python_versions_list="${python_versions_list% }"

          echo "📋 Available environments:"
          echo "  OS: ${os_list}"
          echo "  Python versions: ${python_versions_list}"

          # マトリックス情報から直接URLを生成
          for current_os in ${os_list}; do
            for version in ${python_versions_list}; do
              report_path="pytest-cov-report/${current_os}/python/${version}"
              if [ -d "$report_path" ]; then
                # OS絵文字の選択
                case "${current_os}" in
                  "ubuntu-latest") os_emoji="🐧" ;;
                  "macos-latest") os_emoji="🍎" ;;
                  "windows-latest") os_emoji="🪟" ;;
                  *) os_emoji="💻" ;;
                esac

                URL_LIST="${URL_LIST}**${os_emoji} ${current_os} / Python ${version}:**\n"
                URL_LIST="${URL_LIST}https://${REPO_OWNER}.github.io/${REPO_NAME}/${report_path}/index.html\n\n"
                echo "  ✅ ${current_os} / Python ${version}"
              else
                echo "  ⚠️ ${current_os} / Python ${version} (not found)"
              fi
            done
          done

          {
            echo "url_list<<EOF"
            echo -e "${URL_LIST}"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      # メッセージ送信 (変更があった場合)
      - name: Send Discord Notification (Updated)
        if: steps.check_and_deploy.outputs.deploy_status == 'updated'
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          echo "📢 Sending update notification to Discord..."

          # ワークフローの詳細ページURL
          workflow_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          # URLリストの整形
          formatted_urls="${{ steps.generate_url_list.outputs.url_list }}"

          # メッセージの作成
          message="## 📈 Coverage Reports Updated ✅

          ### 🔄 Deployment Information
          **Workflow:** ${{ github.workflow }}
          **Run:** [View Details]($workflow_url)
          **Tool:** uv + just
          **Updated Reports:** ${{ steps.check_and_deploy.outputs.updated_reports }}

          ### 📊 Available Coverage Reports
          ${formatted_urls}

          **📅 Last Updated:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')"

          timestamp="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          json_payload=$(jq -n \
            --arg title "📈 ${{ github.workflow }} - Deploy Status" \
            --arg description "$message" \
            --argjson color 65280 \
            --arg timestamp "$timestamp" \
            '{
              "embeds": [
                {
                  "title": $title,
                  "description": $description,
                  "color": $color,
                  "timestamp": $timestamp,
                  "footer": {
                    "text": "🤖 Automated coverage report deployment"
                  }
                }
              ]
            }')

          if [ -n "$DISCORD_WEBHOOK_URL" ]; then
            curl -X POST -H "Content-Type: application/json" \
              -d "$json_payload" \
              "$DISCORD_WEBHOOK_URL"
            echo "✅ Discord notification sent"
          else
            echo "⚠️ Discord webhook URL not configured"
          fi

      # メッセージ送信 (変更がない場合)
      - name: Send Discord Notification (No Changes)
        if: steps.check_and_deploy.outputs.deploy_status == 'unchanged'
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          echo "📢 Sending no-change notification to Discord..."

          workflow_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          message="## 📈 Coverage Reports - No Changes ℹ️

          ### 🔄 Deployment Information
          **Workflow:** ${{ github.workflow }}
          **Run:** [View Details]($workflow_url)
          **Tool:** uv + just

          No changes were detected in the coverage reports.
          All reports are up to date."

          timestamp="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          json_payload=$(jq -n \
            --arg title "📈 ${{ github.workflow }} - Deploy Status" \
            --arg description "$message" \
            --argjson color 16776960 \
            --arg timestamp "$timestamp" \
            '{
              "embeds": [
                {
                  "title": $title,
                  "description": $description,
                  "color": $color,
                  "timestamp": $timestamp,
                  "footer": {
                    "text": "🤖 Automated coverage report deployment"
                  }
                }
              ]
            }')

          if [ -n "$DISCORD_WEBHOOK_URL" ]; then
            curl -X POST -H "Content-Type: application/json" \
              -d "$json_payload" \
              "$DISCORD_WEBHOOK_URL"
            echo "✅ Discord notification sent"
          else
            echo "⚠️ Discord webhook URL not configured"
          fi

      - name: Create deployment summary
        if: always()
        run: |
          {
            echo "## 📈 Coverage Report Deployment Summary"
            echo ""
            echo "### 🚀 Deployment Information"
            echo "- **Status:** ${{ steps.check_and_deploy.outputs.deploy_status }}"
            echo "- **Target Branch:** ${{ needs.set_variables.outputs.ghpages_branch }}"
            echo "- **Tool Stack:** uv + just"
            echo ""

            if [ "${{ steps.check_and_deploy.outputs.deploy_status }}" == "updated" ]; then
              echo "### ✅ Updated Reports"
              echo "- **Updated:** ${{ steps.check_and_deploy.outputs.updated_reports }}"
              echo ""
              echo "### 🔗 Available Reports"
              echo "${{ steps.generate_url_list.outputs.url_list }}"
            else
              echo "### ℹ️ No Changes"
              echo "All coverage reports are up to date. No deployment was necessary."
            fi

            echo ""
            echo "**Generated:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          } >> "$GITHUB_STEP_SUMMARY"
