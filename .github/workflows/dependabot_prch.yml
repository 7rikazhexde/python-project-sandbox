# =============================================================================
# Dependabot PR Check Workflow
# =============================================================================
# 概要: Dependabotによる依存関係更新PRのテスト・検証
# 処理: マルチOS・マルチPython環境でのテスト実行、90%カバレッジ必須
# 補足: 通常PRと同じ条件、キャッシュ統一により高速化、Discord通知機能あり
# =============================================================================

name: Dependabot PR Check

on:
  pull_request:
    branches:
      - main

jobs:
  # ==========================================================================
  # 変数設定ジョブ
  # ==========================================================================
  # 概要: 実行環境設定の読み込み
  # 処理: matrix.jsonからOS・Python版設定を取得
  # 補足: Dependabotによる更新PRのみが対象、バージョンアップ系除外
  # ==========================================================================
  set_variables:
    if: github.actor == 'dependabot[bot]' && !startsWith(github.event.pull_request.title, 'Bump version')
    runs-on: ubuntu-latest
    outputs:
      os: ${{ steps.json2vars.outputs.os }}
      versions_python: ${{ steps.json2vars.outputs.versions_python }}
      ghpages_branch: ${{ steps.json2vars.outputs.ghpages_branch }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0

      - name: Set variables from JSON
        id: json2vars
        uses: 7rikazhexde/json2vars-setter@v1.0.2
        with:
          json-file: .github/json2vars-setter/matrix.json

  # ==========================================================================
  # Dependabot依存関係更新テストジョブ
  # ==========================================================================
  # 概要: 依存関係更新の影響検証
  # 処理: 3OS × 3Python版でテスト実行、更新後の動作確認
  # 補足: マトリックス戦略により9つの組み合わせで並列実行
  # ==========================================================================
  test:
    needs: set_variables
    strategy:
      matrix:
        os: ${{ fromJson(needs.set_variables.outputs.os) }}
        python-version: ${{ fromJson(needs.set_variables.outputs.versions_python) }}
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v6.0.0
        with:
          python-version: ${{ matrix.python-version }}

      # ======================================================================
      # uvキャッシュ
      # ======================================================================
      # 概要: Python依存関係のキャッシュ
      # 処理: ~/.cache/uvと.venvをキャッシュ、依存関係ファイルハッシュでキー生成
      # 補足: 依存関係更新時は自動的に新しいキャッシュが作成される
      # ======================================================================
      - name: Cache uv dependencies
        uses: actions/cache@v4.2.4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: uv-unified-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6.7.0
        with:
          enable-cache: false

      - name: Install dependencies
        shell: bash
        run: |
          uv venv .venv --python python
          uv sync --extra dev

      # ======================================================================
      # Rust環境とキャッシュ
      # ======================================================================
      # 概要: Rustツールチェーンとjustコマンドのセットアップ
      # 処理: Rustインストール、キャッシュ、justビルド
      # 補足: OS別にキャッシュ、cargo install の高速化
      # ======================================================================
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - uses: Swatinem/rust-cache@v2.8.0

      - name: Install just
        run: cargo install just --locked
        shell: bash

      - name: Verify just
        run: just --version
        shell: bash

      # ======================================================================
      # テスト実行
      # ======================================================================
      # 概要: テスト実行とカバレッジ測定
      # 処理: justコマンド存在確認後実行、失敗時はpytestで直接実行
      # 補足: 依存関係更新による既存機能への影響を検証
      # ======================================================================
      - name: Run tests with coverage
        shell: bash
        id: pytest
        run: |
          if command -v just >/dev/null 2>&1; then
            just testcov
          else
            uv run python -m pytest --cov=project_a --cov-branch --cov-report=term-missing --cov-report=html --cov-report=xml project_a tests/
          fi

      - name: Generate required reports
        shell: bash
        run: |
          uv run coverage report > pytest-coverage.txt

          if [ ! -f "coverage.xml" ]; then
            uv run coverage xml
          fi

          if [ ! -f "pytest.xml" ]; then
            uv run python -m pytest --junitxml=pytest.xml project_a tests/ --tb=no -q
          fi

      # ======================================================================
      # カバレッジ閾値チェック
      # ======================================================================
      # 概要: カバレッジが90%未満の場合はワークフローを失敗させる
      # 処理: coverage reportでカバレッジ率を取得し閾値判定
      # 補足: 通常PRと同じ条件でカバレッジをチェック
      # ======================================================================
      - name: Check coverage threshold
        shell: bash
        run: |
          COVERAGE=$(uv run coverage report --format=total)
          echo "Coverage: ${COVERAGE}%"
          echo "COVERAGE=${COVERAGE}" >> "$GITHUB_ENV"
          if [ "${COVERAGE}" -lt 90 ]; then
            echo "::error::Coverage ${COVERAGE}% is below 90% threshold"
            exit 1
          fi

      # ======================================================================
      # PRコメント投稿
      # ======================================================================
      # 概要: カバレッジレポートのPRコメント投稿
      # 処理: MishaKav/pytest-coverage-commentでコメント生成・投稿
      # 補足: Dependabot専用タイトルで識別しやすく表示
      # ======================================================================
      - name: Pytest coverage comment
        id: coverageComment
        uses: MishaKav/pytest-coverage-comment@v1.1.57
        with:
          pytest-coverage-path: ./pytest-coverage.txt
          pytest-xml-coverage-path: ./coverage.xml
          title: 🤖 Dependabot Coverage Report (${{ matrix.os }} / Python ${{ matrix.python-version }})
          badge-title: coverage
          hide-badge: false
          hide-report: false
          create-new-comment: true
          hide-comment: false
          report-only-changed-files: false
          remove-link-from-badge: false
          junitxml-path: ./pytest.xml
          junitxml-title: "Pytest Result Summary (os: ${{ matrix.os }} / python-version: ${{ matrix.python-version }})"
          github-token: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Check test results
        if: steps.pytest.outcome == 'failure'
        run: |
          echo "Tests failed. This will be reported in the workflow summary."
          echo "::warning::Tests failed on ${{ matrix.os }} with Python ${{ matrix.python-version }}"

      - name: Write job summary
        shell: bash
        run: |
          echo -e ${{ steps.coverageComment.outputs.summaryReport }} >> "$GITHUB_STEP_SUMMARY"

      # ======================================================================
      # アーティファクト保存
      # ======================================================================
      # 概要: テスト結果の保存
      # 処理: カバレッジレポート、HTMLレポート、JUnitXMLを保存
      # 補足: 7日間保存、Dependabot専用の命名規則
      # ======================================================================
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependabot-coverage-reports-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            coverage.xml
            htmlcov/
            pytest.xml
            pytest-coverage.txt
          retention-days: 7

  # ==========================================================================
  # 全テスト結果チェック
  # ==========================================================================
  # 概要: マトリックス実行の全結果確認
  # 処理: 全ジョブの成功を確認、1つでも失敗があればワークフロー失敗
  # 補足: 依存関係更新による影響範囲を確認
  # ==========================================================================
  check_all_tests:
    needs: test
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]' && !startsWith(github.event.pull_request.title, 'Bump version')
    steps:
      - name: Check test results
        if: contains(needs.test.result, 'failure')
        run: |
          echo "::error::Some tests failed in Dependabot PR. Manual review required."
          exit 1

      - name: All tests passed
        if: success()
        run: |
          echo "✅ All tests passed for Dependabot dependency updates!"

  # ==========================================================================
  # Discord通知
  # ==========================================================================
  # 概要: 依存関係更新結果のDiscord通知
  # 処理: テスト成功/失敗/キャンセルの結果をDiscordに送信
  # 補足: Dependabot専用メッセージ、DISCORD_WEBHOOK_URL設定時のみ実行
  # ==========================================================================
  send_notification:
    needs: [test, check_all_tests]
    runs-on: ubuntu-latest
    if: always() && github.actor == 'dependabot[bot]' && !startsWith(github.event.pull_request.title, 'Bump version')
    steps:
      - name: Send Discord Notification
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          PR_TITLE: ${{ github.event.pull_request.title }}
        run: |
          if [ -z "$DISCORD_WEBHOOK_URL" ]; then
            echo "Discord webhook not configured, skipping notification"
            exit 0
          fi

          workflow_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          if [[ "${{ contains(needs.test.result, 'failure') }}" == "true" ]]; then
            status="FAILED ❌"
            color=16711680
            description="Tests failed with dependency updates. Manual review required."
          elif [[ "${{ needs.check_all_tests.result }}" == "success" ]]; then
            status="SUCCESS ✅"
            color=65280
            description="All tests passed! Dependencies updated successfully."
          else
            status="CANCELLED ⚠️"
            color=16776960
            description="Workflow was cancelled or skipped."
          fi

          message="## 🤖 Dependabot PR Check Completed

          **Status:** ${status}
          **PR:** ${PR_TITLE}
          [View Details]($workflow_url)

          ${description}"

          json_payload=$(jq -n \
            --arg title "🤖 Dependabot Check - ${{ github.workflow }}" \
            --arg description "$message" \
            --argjson color "$color" \
            '{
              "embeds": [
                {
                  "title": $title,
                  "description": $description,
                  "color": $color
                }
              ]
            }')

          curl -X POST -H "Content-Type: application/json" \
            -d "$json_payload" \
            "$DISCORD_WEBHOOK_URL"
