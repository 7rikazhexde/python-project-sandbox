name: Dependabot PR Check

# ワークフローの処理の流れ:
# 1. トリガー条件:
#    - mainブランチへのプルリクエスト時
#    - Dependabotによる実行であること
#    - コミットメッセージが"Bump version"で始まっていないこと
# 2. ジョブの条件判定: Dependabot によるPRであることをチェック
# 3. OS毎の環境設定 (macos-latest, ubuntu-latest, windows-latest)
# 4. Python環境のセットアップ (3.11, 3.12)
# 5. タイムゾーンの設定 (Asia/Tokyo)
# 6. リポジトリのチェックアウト
# 7. uv のインストール
# 8. Python バージョンのインストール (uv管理)
# 9. uv.lock ファイルの自動更新 (Dependabot PR時)
# 10. 依存関係のキャッシュ (uv.lock)
# 11. プロジェクト依存関係のインストール (uv sync)
# 12. テストの実行とカバレッジの計算 (just経由)
# 13. カバレッジが90%以上であることのチェック
# 14. テスト結果とカバレッジレポートの生成
# 15. テスト結果の確認と警告の表示
# 16. ジョブサマリーの作成
# 17. 全テストの結果確認
# 18. Discord Webhookの送信

on:
  pull_request:
    branches:
      - main

jobs:
  set_variables:
    if: github.actor == 'dependabot[bot]' && !startsWith(github.event.pull_request.title, 'Bump version')
    runs-on: ubuntu-latest
    outputs:
      os: ${{ steps.json2vars.outputs.os }}
      versions_python: ${{ steps.json2vars.outputs.versions_python }}
      ghpages_branch: ${{ steps.json2vars.outputs.ghpages_branch }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Set variables from JSON
        id: json2vars
        uses: 7rikazhexde/json2vars-setter@main
        #with:
        #  json-file: .github/workflows/matrix.json

      - name: Debug output values
        run: |
          echo "os: ${{ steps.json2vars.outputs.os }}"
          echo "versions_python: ${{ steps.json2vars.outputs.versions_python }}"
          echo "ghpages_branch: ${{ steps.json2vars.outputs.ghpages_branch }}"

  test:
    needs: set_variables
    strategy:
      matrix:
        os: ${{ fromJson(needs.set_variables.outputs.os) }}
        python-version: ${{ fromJson(needs.set_variables.outputs.versions_python) }}
    runs-on: ${{ matrix.os }}
    env:
      TZ: 'Asia/Tokyo'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2
        with:
          # Dependabotの変更をコミットするため、tokenを設定
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
          enable-cache: true

      - name: Set up Python with uv
        run: |
          uv python install "${{ matrix.python-version }}"
          uv python pin "${{ matrix.python-version }}"

      - name: Set timezone
        uses: szenius/set-timezone@v2.0
        with:
          timezoneLinux: "Asia/Tokyo"
          timezoneMacos: "Asia/Tokyo"
          timezoneWindows: "Tokyo Standard Time"

      - name: Check timezone and Python version
        shell: bash
        run: |
          echo "System date: $(date)"
          echo "TZ environment variable: ${TZ}"
          uv run python -c "import datetime, platform, sys; print(f'Python version: {sys.version}'); print(f'Python timezone: {datetime.datetime.now().astimezone().tzinfo}'); print(f'OS: {platform.system()}')"

      - name: Install just task runner
        shell: bash
        env:
          RUNNER_OS: ${{ runner.os }}
        run: |
          case "${RUNNER_OS}" in
            "Linux")
              curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to "${HOME}/.local/bin"
              echo "${HOME}/.local/bin" >> "${GITHUB_PATH}"
              ;;
            "macOS")
              brew install just
              ;;
            "Windows")
              choco install just
              ;;
          esac

      - name: Verify installations
        shell: bash
        run: |
          echo "🔧 Tool versions:"
          uv --version
          just --version || echo "just not yet available in PATH"
          uv run python --version
          if [ -f "uv.lock" ]; then
            echo "📦 uv.lock hash: $(sha256sum uv.lock | cut -d' ' -f1)"
          else
            echo "📦 uv.lock: not found"
          fi

      # DependabotのPRでuv.lockファイルを更新
      - name: Update uv.lock for Dependabot PR
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        shell: bash
        run: |
          echo "🔄 Updating uv.lock file for Dependabot PR..."

          # uv.lockファイルの状態確認
          echo "Current uv.lock hash:"
          sha256sum uv.lock || echo "uv.lock not found"

          # 依存関係の同期（uv.lockの更新）
          uv sync --extra dev

          # 更新後のuv.lockファイルの確認
          echo "Updated uv.lock hash:"
          sha256sum uv.lock

          # 変更があるかチェック
          if git diff --quiet uv.lock; then
            echo "✅ uv.lock is already up to date"
          else
            echo "📝 uv.lock has been updated"
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add uv.lock
            git commit -m "Update uv.lock after dependency changes" || echo "No changes to commit"
          fi

      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: uv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ matrix.python-version }}-
            uv-${{ runner.os }}-

      - name: Install dependencies
        shell: bash
        run: |
          # 開発依存関係も含めてインストール
          uv sync --extra dev

          # 仮想環境の確認
          echo "Virtual environment location:"
          uv venv --show-path || echo "Using default .venv"

          # インストール済みパッケージの確認（Dependabotによる更新を確認）
          echo "Installed packages:"
          uv pip list

          # 依存関係ツリーの表示（更新されたパッケージの確認）
          echo "Dependency tree:"
          uv tree || echo "uv tree not available"

      - name: Run tests with coverage
        id: pytest
        shell: bash
        run: |
          # justが利用可能な場合はjustを使用、そうでなければuv runで直接実行
          if command -v just &> /dev/null; then
            echo "Running tests with just..."
            just testcov
          else
            echo "Running tests with uv run..."
            uv run pytest --cov=. --cov-branch --cov-report=term-missing --cov-report=html --cov-report=xml --junitxml=pytest.xml project_a tests/
          fi

          # カバレッジの取得
          coverage_percentage=$(uv run coverage report | grep TOTAL | awk '{print $NF}' | sed 's/%//')
          echo "Current coverage: ${coverage_percentage}%"
          echo "COVERAGE=${coverage_percentage}" >> "$GITHUB_ENV"

      - name: Generate coverage text report for PR comment
        shell: bash
        run: |
          # PR用のカバレッジテキストレポートを生成
          if command -v just &> /dev/null; then
            just testcov > pytest-coverage.txt
          else
            uv run pytest --cov=. --cov-branch --cov-report=term-missing project_a tests/ > pytest-coverage.txt
          fi

      - name: Check coverage threshold
        shell: bash
        run: |
          if [ "${COVERAGE}" -lt 90 ]; then
            echo "::error::Test coverage is below 90%. Current coverage: ${COVERAGE}%"
            echo "::warning::Dependabot dependency update caused coverage to drop below 90%"
            # Dependabotの場合は警告のみで継続（依存関係更新が主目的）
            echo "::notice::Dependabot PR: Coverage check failed but continuing workflow"
          else
            echo "✅ Test coverage is above or equal to 90%. Current coverage: ${COVERAGE}%"
          fi

      - name: Pytest coverage comment
        id: coverageComment
        uses: MishaKav/pytest-coverage-comment@v1.1.54
        with:
          pytest-coverage-path: ./pytest-coverage.txt
          pytest-xml-coverage-path: ./coverage.xml
          title: 🤖 Dependabot Coverage Report (${{ matrix.os }} / Python ${{ matrix.python-version }})
          badge-title: coverage
          hide-badge: false
          hide-report: false
          create-new-comment: true
          hide-comment: false
          report-only-changed-files: false
          remove-link-from-badge: false
          junitxml-path: ./pytest.xml
          junitxml-title: "🤖 Dependabot Pytest Result Summary (os: ${{ matrix.os }} / python-version: ${{ matrix.python-version }})"
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check test results
        if: steps.pytest.outcome == 'failure'
        run: |
          echo "::error::Tests failed on ${{ matrix.os }} with Python ${{ matrix.python-version }}"
          echo "::warning::Dependabot dependency update caused test failures"

      - name: Write job summary
        shell: bash
        run: |
          {
            echo "## 🤖 Dependabot Test Results Summary"
            echo ""
            echo "- **OS:** ${{ matrix.os }}"
            echo "- **Python Version:** ${{ matrix.python-version }}"
            echo "- **Coverage:** ${COVERAGE}%"
            echo "- **Status:** ${{ steps.pytest.outcome == 'success' && '✅ Passed' || '❌ Failed' }}"
            echo "- **Tool:** uv + just"
            echo ""
            echo "### Dependency Update Information"
            echo "This is an automated Dependabot PR that updates project dependencies."
            echo "The uv.lock file has been automatically updated to reflect the changes."
            echo ""
            echo "${{ steps.coverageComment.outputs.summaryReport }}"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependabot-coverage-reports-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            coverage.xml
            htmlcov/
            pytest.xml
          retention-days: 30

  check_all_tests:
    needs: test
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]' && !startsWith(github.event.pull_request.title, 'Bump version')
    steps:
      - name: Check test results
        if: contains(needs.test.result, 'failure')
        run: |
          echo "::error::Some tests failed in Dependabot PR. This may indicate compatibility issues with the updated dependencies."
          echo "::warning::Failed test matrices: ${{ toJson(needs.test.result) }}"
          echo "::notice::Consider reviewing the dependency update or fixing compatibility issues"
          exit 1

      - name: All tests passed
        if: success()
        run: |
          echo "✅ All tests passed successfully for Dependabot dependency updates!"
          echo "🤖 Dependencies have been updated and tested across all OS and Python version combinations."

  send_notification:
    needs: [test, check_all_tests]
    runs-on: ubuntu-latest
    if: always() && github.actor == 'dependabot[bot]' && !startsWith(github.event.pull_request.title, 'Bump version')
    steps:
      - name: Send Discord Notification
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          WORKFLOW_ACTOR: ${{ github.actor }}
        run: |
          workflow_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          # テスト結果の判定
          if [[ "${{ contains(needs.test.result, 'failure') }}" == "true" ]]; then
            status="FAILED ❌"
            color=16711680  # 赤色
            description="⚠️ Tests failed with dependency updates. Manual review required."
          elif [[ "${{ needs.check_all_tests.result }}" == "success" ]]; then
            status="SUCCESS ✅"
            color=65280     # 緑色
            description="🎉 All tests passed! Dependencies updated successfully."
          else
            status="CANCELLED ⚠️"
            color=16776960  # 黄色
            description="🔄 Workflow was cancelled or skipped."
          fi

          message="## 🤖 Dependabot PR Check Completed

          ### Workflow Information
          • **Name:** ${{ github.workflow }}
          • **Status:** ${status}
          • **Run:** [View Details]($workflow_url)
          • **PR Title:** ${PR_TITLE}
          • **Actor:** ${WORKFLOW_ACTOR}
          • **Tool:** uv + just

          ### Dependency Update
          • **uv.lock:** Automatically updated
          • **Testing:** Cross-platform compatibility verified

          ${description}"

          timestamp="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          json_payload=$(jq -n \
            --arg title "🤖 ${{ github.workflow }} - Dependabot Check Status" \
            --arg description "$message" \
            --argjson color "$color" \
            --arg timestamp "$timestamp" \
            '{
              "embeds": [
                {
                  "title": $title,
                  "description": $description,
                  "color": $color,
                  "timestamp": $timestamp,
                  "footer": {
                    "text": "🤖 Automated by Dependabot + uv + just"
                  }
                }
              ]
            }')

          if [ -n "$DISCORD_WEBHOOK_URL" ]; then
            curl -X POST -H "Content-Type: application/json" \
              -d "$json_payload" \
              "$DISCORD_WEBHOOK_URL"
          else
            echo "Discord webhook URL not set, skipping notification"
          fi
