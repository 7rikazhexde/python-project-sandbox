name: PR Check (Except Dependabot)

on:
  pull_request:
    branches:
      - main

jobs:
  set_variables:
    if: github.actor != 'dependabot[bot]' && !startsWith(github.event.pull_request.title, 'Bump version')
    runs-on: ubuntu-latest
    outputs:
      os: ${{ steps.json2vars.outputs.os }}
      versions_python: ${{ steps.json2vars.outputs.versions_python }}
      ghpages_branch: ${{ steps.json2vars.outputs.ghpages_branch }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0

      - name: Set variables from JSON
        id: json2vars
        uses: 7rikazhexde/json2vars-setter@v1.0.2
        with:
          json-file: .github/json2vars-setter/matrix.json

      - name: Debug output values
        run: |
          echo "os: ${{ steps.json2vars.outputs.os }}"
          echo "versions_python: ${{ steps.json2vars.outputs.versions_python }}"
          echo "ghpages_branch: ${{ steps.json2vars.outputs.ghpages_branch }}"

  test:
    needs: set_variables
    strategy:
      matrix:
        os: ${{ fromJson(needs.set_variables.outputs.os) }}
        python-version: ${{ fromJson(needs.set_variables.outputs.versions_python) }}
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5.0.0

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"
          enable-cache: true

      - name: Install dependencies
        shell: bash
        run: |
          uv sync --extra dev

      - name: Install just task runner
        shell: bash
        env:
          RUNNER_OS: ${{ runner.os }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          case "${RUNNER_OS}" in
            "Linux")
              echo "üêß Installing just on Linux..."
              # GitHub Actions„ÅÆ„Éà„Éº„ÇØ„É≥„Çí‰ΩøÁî®„Åó„Å¶APIÂà∂Èôê„ÇíÂõûÈÅø
              if [ -n "$GITHUB_TOKEN" ]; then
                echo "Using GitHub token for API access..."
                release_info=$(curl -H "Authorization: token $GITHUB_TOKEN" \
                  -H "Accept: application/vnd.github.v3+json" \
                  -s "https://api.github.com/repos/casey/just/releases/latest")
                download_url=$(echo "$release_info" | grep -o '"browser_download_url": "[^"]*x86_64-unknown-linux-musl.tar.gz"' | cut -d'"' -f4)
              else
                # „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: ÊúÄÊñ∞„ÅÆÂÆâÂÆöÁâà„ÇíÁõ¥Êé•ÊåáÂÆö
                echo "Using fallback download method..."
                download_url="https://github.com/casey/just/releases/download/1.34.0/just-1.34.0-x86_64-unknown-linux-musl.tar.gz"
              fi

              if [ -n "$download_url" ]; then
                echo "üì• Downloading just from: $download_url"
                mkdir -p "${HOME}/.local/bin"
                cd /tmp
                curl -L "$download_url" | tar xz
                mv just "${HOME}/.local/bin/"
                chmod +x "${HOME}/.local/bin/just"
                echo "${HOME}/.local/bin" >> "${GITHUB_PATH}"
                echo "‚úÖ just installed successfully"
              else
                echo "‚ùå Failed to get download URL for just"
                exit 1
              fi
              ;;
            "macOS")
              echo "üçé Installing just on macOS..."
              brew install just
              ;;
            "Windows")
              echo "ü™ü Installing just on Windows..."
              choco install just
              ;;
            *)
              echo "‚ùì Unknown OS: ${RUNNER_OS}"
              exit 1
              ;;
          esac

      - name: Run tests with coverage
        shell: bash
        id: pytest
        run: |
          if command -v just >/dev/null 2>&1; then
            just testcov
          else
            uv run pytest --cov=project_a --cov-branch --cov-report=term-missing --cov-report=html --cov-report=xml project_a tests/
          fi

      - name: Generate required reports
        shell: bash
        run: |
          # Coverage text report for PR comment
          uv run coverage report > pytest-coverage.txt

          # Ensure XML reports exist
          if [ ! -f "coverage.xml" ]; then
            uv run coverage xml
          fi

          if [ ! -f "pytest.xml" ]; then
            uv run pytest --junitxml=pytest.xml project_a tests/ --tb=no -q
          fi

      - name: Check coverage threshold
        shell: bash
        run: |
          COVERAGE=$(uv run coverage report --format=total)
          echo "Coverage: ${COVERAGE}%"
          echo "COVERAGE=${COVERAGE}" >> "$GITHUB_ENV"
          if [ "${COVERAGE}" -lt 90 ]; then
            echo "::error::Coverage ${COVERAGE}% is below 90% threshold"
            exit 1
          fi

      - name: Pytest coverage comment
        id: coverageComment
        uses: MishaKav/pytest-coverage-comment@v1.1.57
        with:
          pytest-coverage-path: ./pytest-coverage.txt
          pytest-xml-coverage-path: ./coverage.xml
          title: Coverage Report (${{ matrix.os }} / Python ${{ matrix.python-version }})
          badge-title: coverage
          hide-badge: false
          hide-report: false
          create-new-comment: true
          hide-comment: false
          report-only-changed-files: false
          remove-link-from-badge: false
          junitxml-path: ./pytest.xml
          junitxml-title: "Pytest Result Summary (os: ${{ matrix.os }} / python-version: ${{ matrix.python-version }})"
          github-token: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Check test results
        if: steps.pytest.outcome == 'failure'
        run: |
          echo "Tests failed. This will be reported in the workflow summary."
          echo "::warning::Tests failed on ${{ matrix.os }} with Python ${{ matrix.python-version }}"

      - name: Write job summary
        shell: bash
        run: |
          echo -e ${{ steps.coverageComment.outputs.summaryReport }} >> "$GITHUB_STEP_SUMMARY"

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            coverage.xml
            htmlcov/
            pytest.xml
            pytest-coverage.txt
          retention-days: 30

  check_all_tests:
    needs: test
    runs-on: ubuntu-latest
    if: github.actor != 'dependabot[bot]' && !startsWith(github.event.pull_request.title, 'Bump version')
    steps:
      - name: Check test results
        if: contains(needs.test.result, 'failure')
        run: |
          echo "::error::Some tests failed. Please check the test results and fix any issues before merging."
          exit 1

      - name: All tests passed
        if: success()
        run: |
          echo "‚úÖ All tests passed successfully across all OS and Python version combinations!"

  send_notification:
    needs: [test, check_all_tests]
    runs-on: ubuntu-latest
    if: always() && github.actor != 'dependabot[bot]' && !startsWith(github.event.pull_request.title, 'Bump version')
    steps:
      - name: Send Discord Notification
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          WORKFLOW_ACTOR: ${{ github.actor }}
        run: |
          if [ -z "$DISCORD_WEBHOOK_URL" ]; then
            echo "Discord webhook not configured, skipping notification"
            exit 0
          fi

          workflow_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          if [[ "${{ contains(needs.test.result, 'failure') }}" == "true" ]]; then
            status="FAILED ‚ùå"
            color=16711680
            description="Some tests failed. Please check the workflow details."
          elif [[ "${{ needs.check_all_tests.result }}" == "success" ]]; then
            status="SUCCESS ‚úÖ"
            color=65280
            description="All tests passed successfully!"
          else
            status="CANCELLED ‚ö†Ô∏è"
            color=16776960
            description="Workflow was cancelled or skipped."
          fi

          message="## üîç PR Check Completed

          **Status:** ${status}
          **PR:** ${PR_TITLE}
          **Actor:** ${WORKFLOW_ACTOR}
          [View Details]($workflow_url)

          ${description}"

          json_payload=$(jq -n \
            --arg title "PR Check - ${{ github.workflow }}" \
            --arg description "$message" \
            --argjson color "$color" \
            '{
              "embeds": [
                {
                  "title": $title,
                  "description": $description,
                  "color": $color
                }
              ]
            }')

          curl -X POST -H "Content-Type: application/json" \
            -d "$json_payload" \
            "$DISCORD_WEBHOOK_URL"
