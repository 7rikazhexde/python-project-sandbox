name: pytest-html Report and Deploy Multi-OS

# ワークフローの処理の流れ:
# 1. トリガー条件:
#    - pytest-testmon ワークフローの完了後に repository_dispatch イベントで起動
# 2. 複数の環境（OS、Pythonバージョン）でのセットアップ
#    - .github/workflows/send_payload_to_pytest_testmon.ymlで設定
#      - macos-latest, Ubuntu, Windowsの最新バージョンで実行
#      - Python 3.11 と 3.12 を使用
# 3. testmon データの取得とテストの実行確認
#    - testmon の結果に基づき、実行対象外の場合はテストをスキップ
#    - スキップ対象の判定は .github/check_exclude_testmon.py(mainブランチ内) で行う
# 4. pytest-html を使用して HTML レポートを生成
#    - 各 OS 環境と Python バージョンごとに個別のレポートを生成
#    - スキップ対象は pytest-cov を実行しない
#    - スキップ対象の判定は .github/check_exclude_testmon.py(ghpagesブランチ内) で行う
# 5. カバレッジ結果のアップロード
#    - 各レポートを GitHub Actions の成果物としてアップロード
#    - スキップ対象は アップロードしない
#    - スキップ対象の判定は .github/check_exclude_testmon.py(ghpagesブランチ内) で行う
# 6. 全テスト結果の確認
#    - いずれかのテストが失敗した場合、エラーを報告
# 7. GitHub Pages へのデプロイ
#    - スキップ対象以外のデプロイを実行
#    - スキップ対象の判定は .github/check_exclude_testmon.py(ghpagesブランチ内) で行う
#    - 変更がある場合のみデプロイを行う
# 8. デプロイしたレポートの URL を生成
#    - スキップの対象外はRunnnig testとスキップの対象はSkiping testと区別する
#    - スキップ対象の判定は .github/check_exclude_testmon.py(ghpagesブランチ内) で行う
# 9. 変更の有無に応じた LINE 通知の送信
#    - 変更があった場合と変更がなかった場合で異なるメッセージを送信
#    - 変更があった場合はデプロイしたレポートの URL をメッセージとして作成して送信する
# Note
#    - jobの実行内容でpythonコマンドの実行方法はpoetryとpython3(3.12)で分けています。

on:
  repository_dispatch:
    types: [run-pytest-html]

jobs:
  test-and-report:
    strategy:
      matrix:
        os: ${{ github.event.client_payload.os }}
        python-version: ${{ github.event.client_payload.python_versions }}
    runs-on: ${{ matrix.os }}
    env:
      TZ: "Asia/Tokyo"
    outputs:
      ghpages_branch: ${{ steps.set-ghpages-branch.outputs.ghpages_branch }}
      skip_tests: ${{ steps.check_tests.outputs.skip_tests }}
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Set GHPAGES_BRANCH from client_payload
        id: set-ghpages-branch
        shell: bash
        run: |
          echo "Raw ghpage_branch value: ${{ github.event.client_payload.ghpage_branch }}"

          # 配列の最初の要素を取得
          ghpages_branch=${{ github.event.client_payload.ghpage_branch[0] }}

          echo "Extracted ghpages_branch: $ghpages_branch"

          # GITHUB_OUTPUTに出力
          echo "ghpages_branch=$ghpages_branch" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set timezone
        uses: szenius/set-timezone@v2.0
        with:
          timezoneLinux: "Asia/Tokyo"
          timezoneMacos: "Asia/Tokyo"
          timezoneWindows: "Tokyo Standard Time"

      - name: Install poetry
        run: |
          pip install poetry
          echo "Poetry version: $(poetry --version)"

      - name: Cache dependencies
        uses: actions/cache@v4.1.2
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install

      - name: Fetch testmon data
        shell: bash
        run: |
          echo "Fetching testmon data..."
          git fetch origin ${{ steps.set-ghpages-branch.outputs.ghpages_branch }}:${{ steps.set-ghpages-branch.outputs.ghpages_branch }} || true
          folder_name="testmon-data/${{ matrix.os }}/python/${{ matrix.python-version }}"
          git checkout ${{ steps.set-ghpages-branch.outputs.ghpages_branch }} -- $folder_name/.testmondata || true
          if [ -f $folder_name/.testmondata ]; then
            echo "Testmon data found. Moving to current directory."
            mv $folder_name/.testmondata .testmondata
          else
            echo "No testmon data found for ${{ matrix.os }} with Python ${{ matrix.python-version }}."
          fi
        continue-on-error: true

      - name: Check if tests should be executed
        id: check_tests
        run: |
         poetry run python .github/check_exclude_testmon.py
        env:
          UPDATED_TESTMON_JSON: '${{ toJson(github.event.client_payload.updated_testmon_json) }}'
          CURRENT_OS: '${{ matrix.os }}'
          CURRENT_PYTHON_VERSION: '${{ matrix.python-version }}'

      - name: Stop workflow if tests are skipped
        if: steps.check_tests.outputs.skip_tests == 'true'
        run: |
          echo "Tests are skipped for OS=${{ matrix.os }}, Python=${{ matrix.python-version }}."

      - name: Run tests with pytest-html
        if: steps.check_tests.outputs.skip_tests != 'true'
        id: pytest-html
        run: |
          mkdir -p test_results_${{ matrix.os }}_python_${{ matrix.python-version }}
          poetry run pytest --html=test_results_${{ matrix.os }}_python_${{ matrix.python-version }}/report_page.html --css=css/style.css
        shell: bash

      - name: Upload pytest-html results
        if: steps.check_tests.outputs.skip_tests != 'true'
        uses: actions/upload-artifact@v4.4.3
        with:
          name: test-results-${{ matrix.os }}-python-${{ matrix.python-version }}
          path: test_results_${{ matrix.os }}_python_${{ matrix.python-version }}

  check_all_tests:
    if: needs.test-and-report.outputs.skip_tests != 'true'
    needs: test-and-report
    runs-on: ubuntu-latest
    steps:
      - name: Check test results
        if: contains(needs.test-and-report.result, 'failure')
        run: |
          echo "Some tests failed. Please check the test results and fix any issues before merging."
          exit 1

  deploy:
    if: needs.test-and-report.outputs.skip_tests != 'true' && needs.check_all_tests.result == 'success'
    needs: [test-and-report, check_all_tests]
    runs-on: ubuntu-latest
    outputs:
      deploy_status: ${{ steps.check_and_deploy.outputs.deploy_status }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version: '3.12'

      - name: Download pytest-html artifacts
        uses: actions/download-artifact@v4.1.8

      - name: Setup Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Check and Deploy to GitHub Pages
        id: check_and_deploy
        env:
          UPDATED_TESTMON_JSON: '${{ toJson(github.event.client_payload.updated_testmon_json) }}'
        run: |
          git fetch origin ${{ needs.test-and-report.outputs.ghpages_branch }}:${{ needs.test-and-report.outputs.ghpages_branch }} || git checkout -b ${{ needs.test-and-report.outputs.ghpages_branch }}
          git checkout ${{ needs.test-and-report.outputs.ghpages_branch }}
          git pull origin ${{ needs.test-and-report.outputs.ghpages_branch }} --rebase

          changes_made=false
          os_list="${{ join(github.event.client_payload.os, ' ') }}"
          python_versions_list="${{ join(github.event.client_payload.python_versions, ' ') }}"

          # テスト対象を確認するためのPythonスクリプトを実行
          for os in $os_list; do
            for python_version in $python_versions_list; do
              export CURRENT_OS=$os
              export CURRENT_PYTHON_VERSION=$python_version
              python3 .github/check_exclude_testmon.py

              # skip_tests が true の場合はそのOSとPythonバージョンをスキップ
              if [ "$TEST_SHOULD_BE_SKIPPED" = "true" ]; then
                echo "Skipping deployment for OS=$os, Python=$python_version as it is excluded."
                continue
              fi

              folder_name="pytest-html-report/${os}/python/${python_version}"
              mkdir -p $folder_name # フォルダを作成

              # テスト結果のHTMLファイルが存在するか確認
              if [ -f test-results/$os/python/$python_version/report_page.html ]; then
                # HTMLファイルに差分があるかどうかを確認
                if [ ! -f $folder_name/report_page.html ] || ! diff test-results/$os/python/$python_version/report_page.html $folder_name/report_page.html > /dev/null; then
                  echo "Changes detected for $os with Python $python_version, updating..."
                  mv test-results/$os/python/$python_version/report_page.html $folder_name/

                  # assets ディレクトリも存在する場合はコピー
                  if [ -d test-results/$os/python/$python_version/assets ]; then
                    rm -rf $folder_name/assets
                    cp -r test-results/$os/python/$python_version/assets $folder_name/
                  fi
                  git add $folder_name
                  changes_made=true
                else
                  echo "No changes for $os with Python $python_version, skipping..."
                fi
              else
                echo "No pytest-html report found for $os with Python $python_version"
              fi
            done
          done

          # 変更があった場合のみコミットとプッシュを行う
          if [ "$changes_made" = true ]; then
            git commit -m "Update pytest-html reports on GitHub Pages"
            # コミットとプッシュが失敗した場合の対処
            if ! git push origin ${{ needs.test-and-report.outputs.ghpages_branch }}; then
              git pull origin ${{ needs.test-and-report.outputs.ghpages_branch }} --rebase
              git push origin ${{ needs.test-and-report.outputs.ghpages_branch }}
            fi
            echo "deploy_status=updated" >> $GITHUB_OUTPUT
          else
            echo "No changes to commit"
            echo "deploy_status=unchanged" >> $GITHUB_OUTPUT
          fi

      - name: Generate URL list
        id: generate_url_list
        env:
          UPDATED_TESTMON_JSON: '${{ toJson(github.event.client_payload.updated_testmon_json) }}'
        run: |
          IFS='/' read -ra REPO_INFO <<< "$GITHUB_REPOSITORY"
          REPO_OWNER=${REPO_INFO[0]}
          REPO_NAME=${REPO_INFO[1]}
          URL_LIST=""
          os_list="${{ join(github.event.client_payload.os, ' ') }}"
          python_versions_list="${{ join(github.event.client_payload.python_versions, ' ') }}"

          # テスト対象のOSとPythonバージョンごとにチェックしてURLリストを生成
          for os in $os_list; do
            for python_version in $python_versions_list; do
              export CURRENT_OS=$os
              export CURRENT_PYTHON_VERSION=$python_version
              python3 .github/check_exclude_testmon.py

              # 環境ファイルから最新の値を読み込む
              if [ -f "$GITHUB_ENV" ]; then
                source "$GITHUB_ENV"
              fi

              # skip_tests が true ならばURLをスキップ
              if [ "$TEST_SHOULD_BE_SKIPPED" = "true" ]; then
                echo "Skipping URL generation for OS=$os, Python=$python_version as it is excluded."
                continue
              else
                # 対象の場合はURLリストに追加
                URL_LIST="${URL_LIST}pytest-html-report/${os}/python/${python_version}:\n\
                https://${REPO_OWNER}.github.io/${REPO_NAME}/pytest-html-report/${os}/python/${python_version}/report_page.html\n\n"
              fi
            done
          done

          echo "url_list<<EOF" >> $GITHUB_OUTPUT
          echo -e "$URL_LIST" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Send LINE Notify (Updated)
        if: steps.check_and_deploy.outputs.deploy_status == 'updated'
        env:
          LINE_NOTIFY_TOKEN: ${{ secrets.LINE_ACCESS_TOKEN }}
        run: |
          message="pytest-html report deployment completed. Changes were made.

          Check URLs:
          ${{ steps.generate_url_list.outputs.url_list }}"

          curl -X POST https://notify-api.line.me/api/notify \
            -H "Authorization: Bearer $LINE_NOTIFY_TOKEN" \
            -F "message=${message}"

      - name: Send LINE Notify (No Changes)
        if: steps.check_and_deploy.outputs.deploy_status == 'unchanged'
        env:
          LINE_NOTIFY_TOKEN: ${{ secrets.LINE_ACCESS_TOKEN }}
        run: |
          message="pytest-html report check completed. No changes were necessary."

          curl -X POST https://notify-api.line.me/api/notify \
            -H "Authorization: Bearer $LINE_NOTIFY_TOKEN"
            -F "message=${message}"
