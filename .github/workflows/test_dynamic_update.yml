name: Test Dynamic Update

on:
  workflow_dispatch:

jobs:
  set_variables:
    runs-on: ubuntu-latest
    outputs:
      os: ${{ steps.json2vars.outputs.os }}
      versions_python: ${{ steps.json2vars.outputs.versions_python }}
      versions_nodejs: ${{ steps.json2vars.outputs.versions_nodejs }}
      versions_ruby: ${{ steps.json2vars.outputs.versions_ruby }}
      versions_go: ${{ steps.json2vars.outputs.versions_go }}
      versions_rust: ${{ steps.json2vars.outputs.versions_rust }}
      ghpages_branch: ${{ steps.json2vars.outputs.ghpages_branch }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Set variables with dynamic update
        id: json2vars
        uses: 7rikazhexde/json2vars-setter@dev_issue_114
        with:
          json-file: .github/workflows/update-matrix.json
          update-matrix: 'true'
          python-strategy: 'stable'
          nodejs-strategy: 'latest'
          ruby-strategy: 'both'
          go-strategy: 'both'
          rust-strategy: 'stable'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Debug output values
        run: |
          echo "OS: ${{ steps.json2vars.outputs.os }}"
          echo "Python versions: ${{ steps.json2vars.outputs.versions_python }}"
          echo "Node.js versions: ${{ steps.json2vars.outputs.versions_nodejs }}"
          echo "Ruby versions: ${{ steps.json2vars.outputs.versions_ruby }}"
          echo "Go versions: ${{ steps.json2vars.outputs.versions_go }}"
          echo "Rust versions: ${{ steps.json2vars.outputs.versions_rust }}"
          echo "GitHub Pages branch: ${{ steps.json2vars.outputs.ghpages_branch }}"

      - name: Display matrix.json content
        run: |
          echo "update-matrix.json content after update:"
          cat .github/workflows/update-matrix.json

      - name: Upload matrix.json as artifact
        uses: actions/upload-artifact@v4
        with:
          name: update-matrix-json
          path: .github/workflows/update-matrix.json

  test_python:
    needs: set_variables
    strategy:
      matrix:
        os: ${{ fromJson(needs.set_variables.outputs.os) }}
        python-version: ${{ fromJson(needs.set_variables.outputs.versions_python) }}
    runs-on: ${{ matrix.os }}
    env:
      TZ: 'Asia/Tokyo'
    steps:
      - uses: actions/checkout@v4.2.2
      - name: Set up Python
        uses: actions/setup-python@v5.4.0
        with:
          python-version: ${{matrix.python-version}}
      - name: Set timezone
        uses: szenius/set-timezone@v2.0
        with:
          timezoneLinux: "Asia/Tokyo"
          timezoneMacos: "Asia/Tokyo"
          timezoneWindows: "Tokyo Standard Time"
      - name: Check timezone
        shell: bash
        run: |
          echo "System date: $(date)"
          echo "TZ environment variable: ${TZ}"
          python -c "import datetime, platform; print(f'Python timezone: {datetime.datetime.now().astimezone().tzinfo}'); print(f'OS: {platform.system()}')"
      - name: Install poetry
        run: pip install poetry
      - name: Cache dependencies
        uses: actions/cache@v4.2.2
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        run: poetry install
      - name: Run test
        id: pytest
        #continue-on-error: true
        # Mac / Linux
        # run: poetry run pytest --durations=0 --junitxml=pytest.xml --cov-report xml:coverage.xml --cov=project_a tests/ | tee pytest-coverage.txt
        # Windowss
        # run: poetry run pytest --durations=0 --junitxml=pytest.xml --cov-report xml:coverage.xml --cov=project_a tests/ | Tee-Object -FilePath pytest-coverage.txt
        run: poetry run task testcixml

  test_nodejs:
    needs: set_variables
    strategy:
      matrix:
        os: ${{ fromJson(needs.set_variables.outputs.os) }}
        node-version: ${{ fromJson(needs.set_variables.outputs.versions_nodejs) }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4.2.2

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Check Node.js version
        run: node --version

      - name: Run simple Node.js test
        run: |
          echo "Running Node.js test on ${{ matrix.os }} with Node.js ${{ matrix.node-version }}"
          node .github/tests/nodejs_test.js

  test_ruby:
    needs: set_variables
    strategy:
      matrix:
        os: ${{ fromJson(needs.set_variables.outputs.os) }}
        ruby-version: ${{ fromJson(needs.set_variables.outputs.versions_ruby) }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4.2.2

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby-version }}

      - name: Check Ruby version
        run: ruby --version

      - name: Run simple Ruby test
        run: |
          echo "Running Ruby test on ${{ matrix.os }} with Ruby ${{ matrix.ruby-version }}"
          ruby .github/tests/ruby_test.rb

  test_go:
    needs: set_variables
    strategy:
      matrix:
        os: ${{ fromJson(needs.set_variables.outputs.os) }}
        go-version: ${{ fromJson(needs.set_variables.outputs.versions_go) }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4.2.2

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Check Go version
        run: go version

      - name: Run simple Go test
        run: |
          echo "Running Go test on ${{ matrix.os }} with Go ${{ matrix.go-version }}"
          go run .github/tests/go_sample.go

  test_rust:
    needs: set_variables
    strategy:
      matrix:
        os: ${{ fromJson(needs.set_variables.outputs.os) }}
        rust-version: ${{ fromJson(needs.set_variables.outputs.versions_rust) }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4.2.2

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust-version }}

      - name: Check Rust version
        run: rustc --version

      - name: Run simple Rust test
        run: |
          echo "Running Rust test on ${{ matrix.os }} with Rust ${{ matrix.rust-version }}"
          rustc .github/tests/rust_test.rs -o rust_test
          ./rust_test

  summary:
    needs: [set_variables, test_python, test_nodejs, test_ruby, test_go, test_rust]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Summarize test results
        run: |
          {
            echo "## Dynamic Update Test Results"
            echo ""
            echo "### Dynamic Update Configuration"
            echo "- Python strategy: stable"
            echo "- Node.js strategy: latest"
            echo "- Ruby strategy: both"
            echo "- Go strategy: both"
            echo "- Rust strategy: stable"
            echo ""
            echo "### Updated Versions"
            echo "- Python: ${needs_set_variables_outputs_versions_python}"
            echo "- Node.js: ${needs_set_variables_outputs_versions_nodejs}"
            echo "- Ruby: ${needs_set_variables_outputs_versions_ruby}"
            echo "- Go: ${needs_set_variables_outputs_versions_go}"
            echo "- Rust: ${needs_set_variables_outputs_versions_rust}"
            echo ""
            echo "### Test Status"
            echo "- Python tests: Completed"
            echo "- Node.js tests: Completed"
            echo "- Ruby tests: Completed"
            echo "- Go tests: Completed"
            echo "- Rust tests: Completed"
          } >> "${GITHUB_STEP_SUMMARY}"
        env:
          needs_set_variables_outputs_versions_python: "${{ needs.set_variables.outputs.versions_python }}"
          needs_set_variables_outputs_versions_nodejs: "${{ needs.set_variables.outputs.versions_nodejs }}"
          needs_set_variables_outputs_versions_ruby: "${{ needs.set_variables.outputs.versions_ruby }}"
          needs_set_variables_outputs_versions_go: "${{ needs.set_variables.outputs.versions_go }}"
          needs_set_variables_outputs_versions_rust: "${{ needs.set_variables.outputs.versions_rust }}"

      - name: Download update-matrix.json
        uses: actions/download-artifact@v4
        with:
          name: update-matrix-json
          path: .github/workflows/
        continue-on-error: true

      - name: Commit updated matrix.json
        run: |
          if [ -f ".github/workflows/update-matrix.json" ]; then
            git config --local user.email "github-actions@github.com"
            git config --local user.name "GitHub Actions"
            git add .github/workflows/update-matrix.json
            git diff --staged --quiet || git commit -m "Update matrix.json with latest language versions [skip ci]"
            git push
            echo "Updated matrix.json has been committed to the repository"
          else
            echo "No update-matrix.json file found, skipping commit"
          fi
