name: pytest-testmon Deploy Multi-OS

# ワークフローの処理の流れ:
# 1. トリガー条件:
#    - リポジトリディスパッチイベント（test_pytest-testmon_deploy_multi_os）により起動
# 2. 複数の環境（OS、Pythonバージョン）でのセットアップ
#    - client_payloadで指定されたOS、Pythonバージョンで実行
# 3. GhPagesブランチから前回の.testmondataを取得
#    - OS、Pythonバージョンごとに個別のパスから取得
#    - 取得できない場合は新規作成として扱う
# 4. pytest-testmonを使用してテスト実行
#    - 取得した.testmondataを使用して差分テストを実行
#    - テスト実行結果を確認し、実行の有無をフラグとして保持
# 5. .testmondataファイルのアップロード
#    - テストが実行された場合のみ、成果物としてアップロード
# 6. GitHub Pagesへのデプロイ
#    - アップロードされた.testmondataをGhPagesブランチにデプロイ
#    - 変更の有無を確認し、変更があった場合のみ更新を実行
# 7. .testmondataの更新情報のJSON生成
#    - 更新された環境（OS、Pythonバージョン）の情報を含むJSONを作成
#    - 更新されなかった環境の情報も別途JSONとして作成
# 8. 後続ワークフローのトリガー
#    - 更新情報JSONを含むペイロードを作成
#    - pytest-covとpytest-htmlワークフローをトリガー

on:
  repository_dispatch:
    types:
      - test_pytest-testmon_deploy_multi_os

jobs:
  test-and-deploy-testmon:
    strategy:
      matrix:
        os: ${{ github.event.client_payload.os_list }}
        python-version: ${{ github.event.client_payload.version_list }}
    runs-on: ${{ matrix.os }}
    env:
      TZ: "Asia/Tokyo"
    permissions:
      contents: write
      pull-requests: write
    outputs:
      tests_executed: ${{ steps.pytest-testmon.outputs.tests_executed }}
      ghpages_branch: ${{ steps.set-ghpages-branch.outputs.ghpages_branch }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Set GHPAGES_BRANCH from client_payload
        id: set-ghpages-branch
        run: echo "ghpages_branch=${{ github.event.client_payload.ghpages_branch }}" >> "$GITHUB_OUTPUT"

      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set timezone
        uses: szenius/set-timezone@v2.0
        with:
          timezoneLinux: "Asia/Tokyo"
          timezoneMacos: "Asia/Tokyo"
          timezoneWindows: "Tokyo Standard Time"

      - name: Install poetry
        run: |
          pip install poetry
          echo "Poetry version: $(poetry --version)"

      - name: Cache dependencies
        uses: actions/cache@v4.1.2
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: |
          poetry install
          echo "Installed dependencies:"
          poetry show --tree

      - name: Fetch previous testmon data
        shell: bash
        run: |
          echo "Fetching previous testmon data..."
          git fetch origin "${{ steps.set-ghpages-branch.outputs.ghpages_branch }}":"${{ steps.set-ghpages-branch.outputs.ghpages_branch }}" || true
          testmon_path="testmon-data/${{ matrix.os }}/python/${{ matrix.python-version }}"
          git checkout "${{ steps.set-ghpages-branch.outputs.ghpages_branch }}" -- "${testmon_path}/.testmondata" || true
          if [ -f "${testmon_path}/.testmondata" ]; then
            echo "Previous testmon data found. Moving to current directory."
            mv "${testmon_path}/.testmondata" ".testmondata"
            rm -rf "${testmon_path}"
          else
            echo "No previous testmon data found for ${{ matrix.os }} with Python ${{ matrix.python-version }}."
          fi
        continue-on-error: true

      - name: Run tests with testmon
        id: pytest-testmon
        shell: bash
        run: |
          echo "Running tests with testmon..."
          output=$(poetry run pytest --testmon -v)
          echo "${output}"

          {
            echo "testmon_output<<EOF"
            echo "${output}"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

          if echo "${output}" | grep -q "collected 0 items"; then
           echo "No tests executed. Skipping deployment and further workflows."
           echo "tests_executed=false" >> "$GITHUB_OUTPUT"
          else
           echo "Tests executed. Proceeding with deployment and further workflows."
           echo "tests_executed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Create testmon directory and move .testmondata
        shell: bash
        run: |
          echo "Creating testmon directory..."
          testmon_path="testmon-data/${{ matrix.os }}/python/${{ matrix.python-version }}"
          mkdir -p "${testmon_path}"
          echo "Moving .testmondata file..."
          if [ -f ".testmondata" ]; then
            mv ".testmondata" "${testmon_path}/.testmondata" && echo "File moved successfully." || echo "Failed to move file."
          else
            echo "Warning: .testmondata file not found in root directory."
          fi
          echo "Contents of ${testmon_path}:"
          ls -la "${testmon_path}"

      - name: Upload testmon data
        uses: actions/upload-artifact@v4.4.3
        with:
          name: testmon-data_${{ matrix.os }}_python_${{ matrix.python-version }}
          path: testmon-data/${{ matrix.os }}/python/${{ matrix.python-version }}/.testmondata
          if-no-files-found: warn
          include-hidden-files: true
          retention-days: 1
        if: steps.pytest-testmon.outputs.tests_executed == 'true'

  deploy-testmon:
    needs: test-and-deploy-testmon
    if: contains(needs.test-and-deploy-testmon.result, 'success')
    runs-on: ubuntu-latest
    outputs:
      updated_testmon_json: ${{ steps.deploy_testmon.outputs.updated_testmon_json }}
      exclude_testmon_json: ${{ steps.deploy_testmon.outputs.exclude_testmon_json }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Download testmon data
        uses: actions/download-artifact@v4.1.8
        with:
          path: downloaded-artifacts

      - name: Setup Git
        run: |
          git config --local user.email "33836132+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          echo "Git configuration set."

      - name: Prepare os_list and python_versions
        run: |
          os_list='${{ join(github.event.client_payload.os_list, ' ') }}'
          python_versions_list='${{ join(github.event.client_payload.version_list, ' ') }}'

          echo "OS List: ${os_list}"
          echo "Python Versions List: ${python_versions_list}"

          echo "os_list=${os_list}" >> "$GITHUB_ENV"
          echo "python_versions_list=${python_versions_list}" >> "$GITHUB_ENV"

      - name: Deploy testmon data to GitHub Pages
        id: deploy_testmon
        run: |
          echo "Deploying testmon data to GitHub Pages..."
          git fetch origin "${{ needs.test-and-deploy-testmon.outputs.ghpages_branch }}":"${{ needs.test-and-deploy-testmon.outputs.ghpages_branch }}" || git checkout -b "${{ needs.test-and-deploy-testmon.outputs.ghpages_branch }}"
          git checkout "${{ needs.test-and-deploy-testmon.outputs.ghpages_branch }}"

          changes_made=false
          updated_testmon_json="["
          exclude_testmon_json="["

          for os in ${os_list}; do
            for python_version in ${python_versions_list}; do
              # 新しいパス構造を反映
              testmon_path="testmon-data/${os}/python/${python_version}"
              artifact_path="downloaded-artifacts/testmon-data_${os}_python_${python_version}"
              echo "Processing ${os} with Python ${python_version}..."
              if [ -d "${artifact_path}" ]; then
                if [ -f "${artifact_path}/.testmondata" ]; then
                  echo "Changes detected for ${os} with Python ${python_version}, updating..."
                  mkdir -p "${testmon_path}"
                  cp "${artifact_path}/.testmondata" "${testmon_path}/.testmondata"
                  git add "${testmon_path}"
                  changes_made=true
                  updated_testmon_json+="{\"os\":\"${os}\", \"python_version\":\"${python_version}\"},"
                else
                  echo "No .testmondata file found in ${artifact_path}"
                  exclude_testmon_json+="{\"os\":\"${os}\", \"python_version\":\"${python_version}\"},"
                fi
              else
                echo "Artifact folder not found: ${artifact_path}"
                exclude_testmon_json+="{\"os\":\"${os}\", \"python_version\":\"${python_version}\"},"
              fi
            done
          done

          # JSONの末尾のカンマを削除して配列を閉じる
          updated_testmon_json="${updated_testmon_json%,}]"
          exclude_testmon_json="${exclude_testmon_json%,}]"
          echo "Updated testmon JSON: ${updated_testmon_json}"
          echo "Exclude testmon JSON: ${exclude_testmon_json}"

          if [ "${changes_made}" = true ]; then
            echo "Changes made, committing and pushing..."
            git commit -m "Update testmon data on GitHub Pages" || echo "No changes to commit"
            git push origin "${{ needs.test-and-deploy-testmon.outputs.ghpages_branch }}" || echo "No changes to push"
            echo "deploy_status=updated" >> "$GITHUB_OUTPUT"
          else
            echo "No changes to commit"
            echo "deploy_status=unchanged" >> "$GITHUB_OUTPUT"
          fi

          echo "updated_testmon_json=${updated_testmon_json}" >> "$GITHUB_OUTPUT"
          echo "exclude_testmon_json=${exclude_testmon_json}" >> "$GITHUB_OUTPUT"

      - name: List deployed files
        if: always()
        run: |
          git checkout ${{ needs.test-and-deploy-testmon.outputs.ghpages_branch }}
          echo "Deployed testmon data files:"
          find . -name ".testmondata"
          echo "Contents of ${{ needs.test-and-deploy-testmon.outputs.ghpages_branch }} branch:"
          ls -R

  trigger-other-workflows:
    needs: [test-and-deploy-testmon, deploy-testmon]
    if: needs.test-and-deploy-testmon.result == 'success' && needs.deploy-testmon.outputs.updated_testmon_json != '[]'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
    steps:
      - name: Output os and python versions
        run: |
          echo "OS: ${{ needs.deploy-testmon.outputs.updated_testmon_json }}"
          echo "Python versions: ${{ needs.deploy-testmon.outputs.updated_testmon_json }}"

      - name: Prepare client payload
        id: prepare-payload
        run: |
          updated_testmon_json='${{ needs.deploy-testmon.outputs.updated_testmon_json }}'
          echo "Updated JSON: ${updated_testmon_json}"

          updated_exclude_testmon_json='${{ needs.deploy-testmon.outputs.exclude_testmon_json }}'
          echo "Updated Exclude JSON: ${updated_exclude_testmon_json}"

          os_list=$(echo "${updated_testmon_json}" | jq -c '[.[].os] | unique')
          python_versions=$(echo "${updated_testmon_json}" | jq -c '[.[].python_version] | unique')

          ghpage_branch=$(echo '${{ needs.test-and-deploy-testmon.outputs.ghpages_branch }}' | jq -R -c '. | [.]')

          echo "os_list: ${os_list}"
          echo "python_versions: ${python_versions}"
          echo "ghpage_branch: ${ghpage_branch}"

          # GitHub Actions出力に渡す
          {
            echo "os_list=${os_list}"
            echo "python_versions=${python_versions}"
            echo "updated_testmon_json=${updated_testmon_json}"
            echo "updated_exclude_testmon_json=${updated_exclude_testmon_json}"
            echo "ghpage_branch=${ghpage_branch}"
          } >> "$GITHUB_OUTPUT"

      - name: Trigger pytest-cov workflow
        uses: peter-evans/repository-dispatch@v3.0.0
        with:
          event-type: run-pytest-cov
          client-payload: |
            {
              "os": ${{ steps.prepare-payload.outputs.os_list }},
              "python_versions": ${{ steps.prepare-payload.outputs.python_versions }},
              "updated_testmon_json": ${{ steps.prepare-payload.outputs.updated_testmon_json }},
              "update_exclude_testmon_json": ${{ steps.prepare-payload.outputs.updated_exclude_testmon_json }},
              "ghpage_branch": ${{ steps.prepare-payload.outputs.ghpage_branch }},
              "skip_tests": false
            }

      - name: Trigger pytest-html workflow
        uses: peter-evans/repository-dispatch@v3.0.0
        with:
          event-type: run-pytest-html
          client-payload: |
            {
              "os": ${{ steps.prepare-payload.outputs.os_list }},
              "python_versions": ${{ steps.prepare-payload.outputs.python_versions }},
              "updated_testmon_json": ${{ steps.prepare-payload.outputs.updated_testmon_json }},
              "update_exclude_testmon_json": ${{ steps.prepare-payload.outputs.updated_exclude_testmon_json }},
              "ghpage_branch": ${{ steps.prepare-payload.outputs.ghpage_branch }},
              "skip_tests": false
            }

      - name: Log workflow triggers
        run: |
          echo "Triggered pytest-cov and pytest-html workflows."
