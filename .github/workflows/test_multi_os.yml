# =============================================================================
# Test Multi-OS Workflow
# =============================================================================
# 概要: メインブランチへのプッシュ時のマルチOS・マルチPythonテスト実行
# 処理: テスト実行、カバレッジ測定、READMEの自動更新、カバレッジブランチへの結果保存
# 補足: 特定パス変更時のみ実行、手動実行可能、キャッシュ統一により高速化
# =============================================================================

name: Test Multi-OS

on:
  push:
    branches:
      - 'main'
    paths:
      - 'project_a/**'
      - 'tests/**'
      - 'pyproject.toml'
      - 'uv.lock'
      - 'justfile'
  workflow_dispatch:

jobs:
  # ==========================================================================
  # 変数設定ジョブ
  # ==========================================================================
  # 概要: 実行環境設定の読み込み
  # 処理: matrix.jsonからOS・Python版設定を取得
  # 補足: バージョンアップとskip ciメッセージを除外
  # ==========================================================================
  set_variables:
    if: ( !startsWith(github.event.head_commit.message, 'Bump version') && !startsWith(github.event.head_commit.message, '[skip ci]') )
    runs-on: ubuntu-latest
    outputs:
      os: ${{ steps.json2vars.outputs.os }}
      versions_python: ${{ steps.json2vars.outputs.versions_python }}
      ghpages_branch: ${{ steps.json2vars.outputs.ghpages_branch }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0

      - name: Set variables from JSON
        id: json2vars
        uses: 7rikazhexde/json2vars-setter@bugfix-poetry-install-ssl-error
        with:
          json-file: .github/json2vars-setter/matrix.json

      - name: Debug output values
        run: |
          echo "os: ${{ steps.json2vars.outputs.os }}"
          echo "versions_python: ${{ steps.json2vars.outputs.versions_python }}"
          echo "ghpages_branch: ${{ steps.json2vars.outputs.ghpages_branch }}"

  # ==========================================================================
  # ファイル存在確認ジョブ
  # ==========================================================================
  # 概要: 特定ファイルの存在確認
  # 処理: ton_whales_staking_dashboard.pyの存在をチェック
  # 補足: README生成時の除外ファイル表示制御に使用
  # ==========================================================================
  check_file:
    needs: set_variables
    runs-on: ubuntu-latest
    outputs:
      file_exists: ${{ steps.check_file.outputs.file_exists }}
    steps:
      - uses: actions/checkout@v5.0.0
      - name: Check file existence
        id: check_file
        run: |
          if [ -f "project_a/staking/ton_whales_staking_dashboard.py" ]; then
            echo "file_exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "file_exists=false" >> "$GITHUB_OUTPUT"
          fi

  # ==========================================================================
  # メインテストジョブ
  # ==========================================================================
  # 概要: クロスプラットフォーム・クロスバージョンテスト
  # 処理: 3OS × 3Python版でテスト実行、タイムゾーン設定、カバレッジ測定
  # 補足: マトリックス戦略により9つの組み合わせで並列実行、Asia/Tokyo固定
  # ==========================================================================
  test:
    needs: [set_variables, check_file]
    strategy:
      matrix:
        os: ${{ fromJson(needs.set_variables.outputs.os) }}
        python-version: ${{ fromJson(needs.set_variables.outputs.versions_python) }}
    runs-on: ${{ matrix.os }}
    env:
      TZ: 'Asia/Tokyo'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v5.0.0

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{matrix.python-version}}

      # ======================================================================
      # タイムゾーン設定
      # ======================================================================
      # 概要: 全OSでAsia/Tokyoタイムゾーンに統一
      # 処理: OS別のタイムゾーン設定とPythonでの確認
      # 補足: テスト結果の一貫性確保のため
      # ======================================================================
      - name: Set timezone
        uses: szenius/set-timezone@v2.0
        with:
          timezoneLinux: "Asia/Tokyo"
          timezoneMacos: "Asia/Tokyo"
          timezoneWindows: "Tokyo Standard Time"

      - name: Check timezone
        shell: bash
        run: |
          echo "System date: $(date)"
          echo "TZ environment variable: ${TZ}"
          python -c "import datetime, platform; print(f'Python timezone: {datetime.datetime.now().astimezone().tzinfo}'); print(f'OS: {platform.system()}')"

      # ======================================================================
      # uvキャッシュ
      # ======================================================================
      # 概要: Python依存関係のキャッシュ
      # 処理: ~/.cache/uvと.venvをキャッシュ、依存関係ファイルハッシュでキー生成
      # 補足: 全OS・Python版で統一キャッシュを使用
      # ======================================================================
      - name: Cache uv dependencies
        uses: actions/cache@v4.2.4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: uv-unified-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6.7.0
        with:
          enable-cache: false

      - name: Install dependencies
        shell: bash
        run: |
          uv venv .venv --python python
          uv sync --extra dev

      # ======================================================================
      # Rust環境とキャッシュ
      # ======================================================================
      # 概要: Rustツールチェーンとjustコマンドのセットアップ
      # 処理: Rustインストール、キャッシュ、justビルド
      # 補足: OS別にキャッシュ、cargo install の高速化
      # ======================================================================
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - uses: Swatinem/rust-cache@v2.8.1

      - name: Install just
        run: cargo install just --locked
        shell: bash

      - name: Verify just
        run: just --version
        shell: bash

      # ======================================================================
      # テスト実行
      # ======================================================================
      # 概要: テスト実行とカバレッジ測定
      # 処理: justコマンドでCI用テスト実行（XML出力付き）
      # 補足: カバレッジレポートを複数形式で生成
      # ======================================================================
      - name: Run test
        id: pytest
        shell: bash
        run: just test-ci-full

      # ======================================================================
      # カバレッジ閾値チェック
      # ======================================================================
      # 概要: カバレッジ90%閾値の強制
      # 処理: coverage reportでカバレッジ率を取得し90%未満で失敗
      # 補足: このチェックに失敗するとワークフロー全体が失敗
      # ======================================================================
      #- name: Check coverage threshold
      #  shell: bash
      #  run: |
      #    COVERAGE=$(uv run coverage report --format=total)
      #    echo "Coverage: ${COVERAGE}%"
      #    echo "COVERAGE=${COVERAGE}" >> "$GITHUB_ENV"
      #    if [ "${COVERAGE}" -lt 90 ]; then
      #      echo "::error::Coverage ${COVERAGE}% is below 90% threshold"
      #      exit 1
      #    fi

      # ======================================================================
      # カバレッジコメント生成
      # ======================================================================
      # 概要: カバレッジレポートの生成
      # 処理: MishaKav/pytest-coverage-commentでレポート生成
      # 補足: コメント投稿は無効、レポートデータのみ生成
      # ======================================================================
      - name: Pytest coverage comment
        id: coverageComment
        uses: MishaKav/pytest-coverage-comment@v1.1.57
        with:
          pytest-coverage-path: ./pytest-coverage.txt
          pytest-xml-coverage-path: ./coverage.xml
          title: Coverage Report (${{ matrix.os }} / Python ${{ matrix.python-version }})
          badge-title: coverage
          hide-badge: false
          hide-report: false
          create-new-comment: false
          hide-comment: false
          report-only-changed-files: false
          remove-link-from-badge: false
          junitxml-path: ./pytest.xml
          junitxml-title: "Pytest Result Summary (os: ${{ matrix.os }} / python-version: ${{ matrix.python-version }})"
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check test results
        if: steps.pytest.outcome == 'failure'
        run: |
          echo "Tests failed. This will prevent merging the pull request."
          exit 1

      - name: Save summary report
        run: |
          echo '${{ steps.coverageComment.outputs.summaryReport }}' > summary-report.md

      # ======================================================================
      # アーティファクト保存
      # ======================================================================
      # 概要: テスト結果の保存
      # 処理: カバレッジレポート、HTMLレポート、JUnitXML、サマリーレポートを保存
      # 補足: マトリックス毎に個別保存、README生成で使用
      # ======================================================================
      - name: Upload coverage data
        uses: actions/upload-artifact@v4.6.1
        with:
          name: coverage-data-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            pytest-coverage.txt
            coverage.xml
            pytest.xml
            summary-report.md

  # ==========================================================================
  # README更新ジョブ
  # ==========================================================================
  # 概要: カバレッジブランチのREADME自動生成・更新
  # 処理: 全マトリックス結果を統合してREADME生成、coverageブランチにプッシュ
  # 補足: 孤立ブランチとして管理、ファイル存在確認結果を反映
  # ==========================================================================
  update_readme:
    needs: [set_variables, check_file, test]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v5.0.0

      - name: Update README in coverage branch
        run: |
          # GitHub Actionsの変数形式で設定
          os='${{ needs.set_variables.outputs.os }}'
          python_versions='${{ needs.set_variables.outputs.versions_python }}'

          # JSON形式の文字列から配列を作成
          os_list=$(echo "${os}" | jq -r '.[]' | tr '\n' ' ' | sed 's/ $//')
          python_versions_list=$(echo "${python_versions}" | jq -r '.[]' | tr '\n' ' ' | sed 's/ $//')

          # "coverage" ブランチが存在する場合はチェックアウト、存在しない場合は新規作成する
          if git ls-remote --heads origin coverage | grep coverage; then
            git checkout coverage
          else
            git checkout --orphan coverage
            git rm -rf .
          fi

          # README.mdの内容を一度に生成
          {
            echo "# Pytest Coverages Summary"
            echo "[![](https://github.com/${GITHUB_REPOSITORY}/actions/workflows/test_multi_os.yml/badge.svg)](https://github.com/${GITHUB_REPOSITORY}/actions/workflows/test_multi_os.yml)"
            echo ""

            # 最新のコミット情報をREADMEに追加
            commit_hash8=${GITHUB_SHA::8}
            commit_link="[${commit_hash8}](https://github.com/${GITHUB_REPOSITORY}/tree/${commit_hash8})"
            echo -e "> [!Note]"
            echo -e "> "
            echo -e "> Commit: ${commit_link}"
            echo -e ""

            # テスト対象外のファイルに関する注記を追加（ファイルの存在確認結果に基づく）
            commit_hash=${GITHUB_SHA}
            file_path_1="project_a/staking/ton_whales_staking_dashboard.py"
            file_path_2="staking/ton_whales_staking_dashboard.py"
            file_link="https://github.com/${GITHUB_REPOSITORY}/blob/${commit_hash}/${file_path_2}"

            if [[ "${{ needs.check_file.outputs.file_exists }}" == "true" ]]; then
              echo -e "> [!Important]"
              echo -e "> The following file is intentionally excluded from test coverage:"
              echo -e "> - [${file_path_1}](${file_link})"
              echo -e "> "
              echo -e "> This file contains complex external dependencies and is verified through manual and integration testing."
              echo -e "> "
            else
              echo "Note: File ${file_path_1} not found. Skipping addition to README.md." >&2
            fi

            # macOS、Ubuntu、Windowsの各OSとPythonバージョンごとにカバレッジレポートを追加
            for os in ${os_list}; do
              for version in ${python_versions_list}; do
                echo "## Coverage Report (os: ${os} / python-version: ${version})"
                if [ -f "coverage-data-${os}-${version}/summary-report.md" ]; then
                  sed -e 's/^"//' -e 's/"$//' -e 's/\\"/"/g' -e 's/\\\\/\\/g' -e 's/\\n/\n/g' -e 's/\r$//' "coverage-data-${os}-${version}/summary-report.md" |
                  sed -e 's/&lt;/</g' -e 's/&gt;/>/g' -e 's/&amp;/\&/g' |
                  sed '/^$/N;/^\n$/D' |
                  sed -e 's/^"//' -e 's/"$//'
                else
                  echo "No summary report found for ${os} - ${version}"
                fi
                echo ""
              done
            done
          } > README.md

          # カバレッジレポート内のリンクを有効にするためにファイルパスを修正する
          sed -i '
            s|/blob/undefined/\([^"]*\)|/blob/'"${commit_hash}"'/\1|g;
            s|/blob/\([a-f0-9]*\)/\([^"]*\)|/blob/\1/project_a/\2|g;
            s|/blob/\([a-f0-9]*\)/project_a/README\.md|/blob/\1/README.md|g
          ' README.md

      - name: Commit and push
        run: |
          # Gitのユーザー設定とコミット、ブランチへのプッシュ
          git config --local user.email "33836132+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add README.md
          git commit -m "Update coverage for all environments"
          git push origin coverage

  # ==========================================================================
  # 全テスト結果チェック
  # ==========================================================================
  # 概要: マトリックス実行の全結果確認
  # 処理: 全ジョブの成功を確認、1つでも失敗があればワークフロー失敗
  # 補足: README更新完了後の最終チェック
  # ==========================================================================
  check_all_tests:
    needs: [set_variables, check_file, test, update_readme]
    runs-on: ubuntu-latest
    steps:
      - name: Check test results
        if: contains(needs.test.result, 'failure')
        run: |
          echo "Some tests failed. Please check the test results and fix any issues before merging."
          exit 1
