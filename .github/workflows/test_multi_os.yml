name: Test Multi-OS

on:
  push:
    branches:
      - 'main'
    paths:
      - 'project_a/**'
      - 'tests/**'
      - 'pyproject.toml'
      - 'uv.lock'
      - 'justfile'
  workflow_dispatch:

jobs:
  set_variables:
    if: ( !startsWith(github.event.head_commit.message, 'Bump version') && !startsWith(github.event.head_commit.message, '[skip ci]') )
    runs-on: ubuntu-latest
    outputs:
      os: ${{ steps.json2vars.outputs.os }}
      versions_python: ${{ steps.json2vars.outputs.versions_python }}
      ghpages_branch: ${{ steps.json2vars.outputs.ghpages_branch }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Set variables from JSON
        id: json2vars
        uses: 7rikazhexde/json2vars-setter@v1.0.1
        with:
          json-file: .github/json2vars-setter/matrix.json

      - name: Debug output values
        run: |
          echo "os: ${{ steps.json2vars.outputs.os }}"
          echo "versions_python: ${{ steps.json2vars.outputs.versions_python }}"
          echo "ghpages_branch: ${{ steps.json2vars.outputs.ghpages_branch }}"

  check_file:
    needs: set_variables
    runs-on: ubuntu-latest
    outputs:
      file_exists: ${{ steps.check_file.outputs.file_exists }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Check file existence
        id: check_file
        run: |
          if [ -f "project_a/staking/ton_whales_staking_dashboard.py" ]; then
            echo "file_exists=true" >> "$GITHUB_OUTPUT"
            echo "✅ Found excluded file: project_a/staking/ton_whales_staking_dashboard.py"
          else
            echo "file_exists=false" >> "$GITHUB_OUTPUT"
            echo "ℹ️ Excluded file not found: project_a/staking/ton_whales_staking_dashboard.py"
          fi

  test:
    needs: [set_variables, check_file]
    strategy:
      matrix:
        os: ${{ fromJson(needs.set_variables.outputs.os) }}
        python-version: ${{ fromJson(needs.set_variables.outputs.versions_python) }}
    runs-on: ${{ matrix.os }}
    env:
      TZ: 'Asia/Tokyo'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"
          enable-cache: true

      - name: Set timezone
        uses: szenius/set-timezone@v2.0
        with:
          timezoneLinux: "Asia/Tokyo"
          timezoneMacos: "Asia/Tokyo"
          timezoneWindows: "Tokyo Standard Time"

      - name: Install dependencies
        shell: bash
        run: |
          uv sync --extra dev

      - name: Install just (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          if [ "${{ runner.os }}" = "Linux" ]; then
            curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to ~/.local/bin
            echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          else
            brew install just
          fi

      - name: Install just (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: choco install just

      - name: Run tests with coverage
        id: pytest
        shell: bash
        run: |
          if command -v just >/dev/null 2>&1; then
            if just --list | grep -q "test-ci-xml"; then
              just test-ci-xml
            elif just --list | grep -q "testcixml"; then
              just testcixml
            else
              just testcov
            fi
          else
            uv run pytest --durations=0 --junitxml=pytest.xml --cov-report xml:coverage.xml --cov=project_a tests/ | tee pytest-coverage.txt
          fi

      - name: Generate coverage text report
        shell: bash
        run: |
          if [ ! -f "pytest-coverage.txt" ]; then
            if command -v just >/dev/null 2>&1 && just --list | grep -q "testcov"; then
              just testcov > pytest-coverage.txt
            else
              uv run pytest --cov=project_a --cov-branch --cov-report=term-missing tests/ > pytest-coverage.txt
            fi
          fi

      - name: Pytest coverage comment
        id: coverageComment
        uses: MishaKav/pytest-coverage-comment@v1.1.54
        with:
          pytest-coverage-path: ./pytest-coverage.txt
          pytest-xml-coverage-path: ./coverage.xml
          title: Multi-OS Coverage Report (${{ matrix.os }} / Python ${{ matrix.python-version }})
          junitxml-path: ./pytest.xml
          github-token: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Check test results
        if: steps.pytest.outcome == 'failure'
        run: |
          echo "::error::Tests failed on ${{ matrix.os }} with Python ${{ matrix.python-version }}"
          exit 1

      - name: Save summary report
        shell: bash
        run: |
          echo '${{ steps.coverageComment.outputs.summaryReport }}' > summary-report.md

      - name: Upload coverage data
        uses: actions/upload-artifact@v4.6.1
        with:
          name: coverage-data-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            pytest-coverage.txt
            coverage.xml
            pytest.xml
            summary-report.md
          retention-days: 30

  update_readme:
    needs: [set_variables, check_file, test]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4.3.0

      - name: Update README in coverage branch
        shell: bash
        run: |
          # GitHub Actionsの変数形式で設定
          os='${{ needs.set_variables.outputs.os }}'
          python_versions='${{ needs.set_variables.outputs.versions_python }}'

          # JSON形式の文字列から配列を作成
          os_list=$(echo "${os}" | jq -r '.[]' | tr '\n' ' ' | sed 's/ $//')
          python_versions_list=$(echo "${python_versions}" | jq -r '.[]' | tr '\n' ' ' | sed 's/ $//')

          # "coverage" ブランチが存在する場合はチェックアウト、存在しない場合は新規作成する
          if git ls-remote --heads origin coverage | grep coverage; then
            git checkout coverage
          else
            git checkout --orphan coverage
            git rm -rf .
          fi

          # README.mdの内容を一度に生成
          {
            echo "# 🧪 Pytest Coverage Summary"
            echo ""
            echo "[![Test Multi-OS](https://github.com/${GITHUB_REPOSITORY}/actions/workflows/test_multi_os.yml/badge.svg)](https://github.com/${GITHUB_REPOSITORY}/actions/workflows/test_multi_os.yml)"
            echo ""
            echo "## 📊 Latest Test Results"
            echo ""

            # 最新のコミット情報をREADMEに追加
            commit_hash8=${GITHUB_SHA::8}
            commit_link="[${commit_hash8}](https://github.com/${GITHUB_REPOSITORY}/tree/${commit_hash8})"
            echo "> [!Note]"
            echo "> **Latest Commit:** ${commit_link}"
            echo "> **Tool Stack:** uv + just"
            echo "> **Generated:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            echo ""

            # テスト対象外のファイルに関する注記を追加
            if [[ "${{ needs.check_file.outputs.file_exists }}" == "true" ]]; then
              commit_hash=${GITHUB_SHA}
              file_path="project_a/staking/ton_whales_staking_dashboard.py"
              file_link="https://github.com/${GITHUB_REPOSITORY}/blob/${commit_hash}/staking/ton_whales_staking_dashboard.py"

              echo "> [!Important]"
              echo "> **Excluded from Coverage:**"
              echo "> The following file is intentionally excluded from test coverage:"
              echo "> - [${file_path}](${file_link})"
              echo "> "
              echo "> This file contains complex external dependencies and is verified through manual and integration testing."
              echo ""
            fi

            echo "## 🔍 Coverage Reports by Environment"
            echo ""

            # 各OSとPythonバージョンごとにカバレッジレポートを追加
            for os in ${os_list}; do
              for version in ${python_versions_list}; do
                # OS絵文字の選択
                case "${os}" in
                  "ubuntu-latest") os_emoji="🐧" ;;
                  "macos-latest") os_emoji="🍎" ;;
                  "windows-latest") os_emoji="🪟" ;;
                  *) os_emoji="💻" ;;
                esac

                echo "### ${os_emoji} ${os} / Python ${version}"
                echo ""

                if [ -f "coverage-data-${os}-${version}/summary-report.md" ]; then
                  # 簡単なHTMLエンティティのデコード
                  sed -e 's/^"//' -e 's/"$//' -e 's/\\"/"/g' -e 's/\\n/\n/g' "coverage-data-${os}-${version}/summary-report.md" |
                  sed -e 's/&lt;/</g' -e 's/&gt;/>/g' -e 's/&amp;/\&/g'
                else
                  echo "⚠️ No summary report found for ${os} - Python ${version}"
                fi
                echo ""
              done
            done

            echo "---"
            echo ""
            echo "**Generated by GitHub Actions** • [View Workflow](https://github.com/${GITHUB_REPOSITORY}/actions/workflows/test_multi_os.yml)"

          } > README.md

      - name: Commit and push coverage branch
        shell: bash
        run: |
          git config --local user.email "33836132+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          if ! git diff --quiet README.md; then
            git add README.md
            git commit -m "📊 Update coverage for all environments

            - Commit: ${GITHUB_SHA::8}
            - Tools: uv + just
            - Generated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"

            git push origin coverage
          fi

  check_all_tests:
    needs: [set_variables, check_file, test, update_readme]
    runs-on: ubuntu-latest
    steps:
      - name: Check test results
        if: contains(needs.test.result, 'failure')
        run: |
          echo "::error::Some tests failed across multiple environments."
          exit 1

      - name: All tests passed
        if: success()
        run: |
          echo "🎉 All tests passed successfully across all OS and Python version combinations!"
